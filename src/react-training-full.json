[{"level":"senior","stack":"reactjs","symbol":"fetch()","tests":[{"code":"","target":[{"code":"[{\n\tit: 'FetchLegend displays the details for Elvis Presley',\n\tlegendId: '1', //Id for Elvis Presley\n\tfetchResponse: { body: { name: 'elvis presley' }},\n\texpected: { firstName: 'Elvis', lastName: 'Presley', error: '' }\n}, {\n\tit: 'FetchLegend cannot find the details for Justin Bieber',\n\tlegendId: '2', //Id for Justin Bieber\n\tfetchResponse: { status: 404 },\n\texpected: { firstName: '', lastName: '', error: 'Legend not found!' }\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst mockApiResponse = () => {\n\t\t\tlet { body = {}, status = 200 } = scenario.fetchResponse;\n\t\t\treturn new global.Response(JSON.stringify(body), { status });\n\t\t};\n\n\t\tsinon.stub(global, 'fetch');\n\t\tglobal.fetch.returns(Promise.resolve(mockApiResponse()));\n\t\t\n\t\t//when\n\t\tconst wrapper = shallow(<FetchLegend id={scenario.legendId} />);\n\n\t\t//then\n\t\texpect(global.fetch)\n\t\t\t.to.have.been.calledWith(`/rest/legends/${scenario.legendId}`);\n\n\t\t//when\n\t\tsetImmediate(() => {\n\t\t\t//then\n\t\t\tlet { firstName, lastName, error } = scenario.expected;\n\t\t\texpect(wrapper.find('.firstName').text()).to.equal(firstName);\n\t\t\texpect(wrapper.find('.lastName').text()).to.equal(lastName);\n\t\t\texpect(wrapper.find('.error').text()).to.equal(error);\n\t\t});\n\n\t\t//cleanup\n\t\tglobal.fetch.restore();\n\t});\n});"}],"codeSolution":"const FetchLegend = ({ id }) => {\n\n\tlet [legend, setLegend] = useState({ \n\t\tfirstName: '', lastName: '', error: '' \n\t});\n\n\tlet capitalise = str => str[0].toUpperCase() + str.slice(1);\n\n\tuseEffect(async () => {\n\t\tlet fetchedLegend = await fetch(`/rest/legends/${id}`)\n\t\t\t.then(response => response.json());\n\t\tif(fetchedLegend.name) {\n\t\t\tlet [firstName, lastName] = fetchedLegend.name.split(' ');\n\t\t\tsetLegend({ \n\t\t\t\tfirstName: capitalise(firstName),\n\t\t\t\tlastName: capitalise(lastName)\n\t\t\t});\n\t\t} else {\n\t\t\tsetLegend({ error: 'Legend not found!' });\n\t\t}\n\t});\n\n\treturn (\n\t\t<>\n\t\t\t<div className='firstName'>{legend.firstName}</div>\n\t\t\t<div className='lastName'>{legend.lastName}</div>\n\t\t\t<div className='error'>{legend.error}</div>\n\t\t</>\n\t);\n};","codeDefault":"","title":"Fetch the details of music legends","desc":"We have a database of music artists.\n\nSome of them are considered 'legends', and so we want to create a component to display their details using REST API."},{"code":"","target":[{"code":"[{\n\tit: 'ImportantPeople displays relevant individuals from the US',\n\tdb: {\n\t\t'1': { name: 'R. Reagan', rank: 1 },\n\t\t'2': { name: 'M. Luther King', rank: 2 },\n\t\t'3': { name: 'A. Lincoln', rank: 3 }\n\t},\n\texpected: ['R. Reagan (#1)', 'M. Luther King (#2)', 'A. Lincoln (#3)']\n}, {\n\tit: 'ImportantPeople displays relevant individuals from the UK',\n\tdb: {\n\t\t'5c9': { name: 'Sir Winston Churchill', rank: 1 },\n\t\t'8b9': { name: 'Charles Darwin', rank: 2 }\n\t},\n\texpected: ['Sir Winston Churchill (#1)', 'Charles Darwin (#2)']\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\t\t\n\t\t//given\n\t\tconst mockListApiResponse = (body = {}) => {\n\t\t\tlet status = 200;\n\t\t\treturn new global.Response(JSON.stringify(body), { status });\n\t\t};\n\n\t\tconst dbIds = Object.keys(scenario.db);\n\t\tsinon.stub(global, 'fetch');\n\t\tglobal.fetch.withArgs('/rest/important-people')\n\t\t\t.returns(Promise.resolve(mockListApiResponse(dbIds)));\n\t\t\t\n\t\tdbIds.forEach(id => {\n\t\t\tlet data = scenario.db[id];\n\t\t\tglobal.fetch.withArgs(`/rest/important-people/${id}`)\n\t\t\t\t.returns(Promise.resolve(mockListApiResponse(data)));\n\t\t});\n\n\t\t//when\n\t\tconst wrapper = shallow(<ImportantPeople />);\n\n\t\t//and\n\t\tsetImmediate(() => {\n\t\t\twrapper.update();\n\t\t\t\n\t\t\t//then\n\t\t\tlet person = wrapper.find('.person');\n\t\t\texpect(person).to.have.length(scenario.expected.length);\n\t\t\tscenario.expected.forEach((personDetails, index) => {\n\t\t\t\texpect(person.at(index).text()).to.equal(personDetails);\n\t\t\t});\n\n\t\t\t//cleanup\n\t\t\tglobal.fetch.restore();\n\t\t});\n\t});\n});"}],"codeSolution":"class ImportantPeople extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { importantPeople: [] };\n\t}\n\n\tfetch(endpoint) {\n\t\treturn fetch(endpoint).then(response => response.json());\n\t}\n\n\tasync componentDidMount() {\n\t\tlet peopleIds = await this.fetch(`/rest/important-people`);\n\t\tlet importantPeople = await Promise.all(\n\t\t\tpeopleIds.map(id => this.fetch(`/rest/important-people/${id}`))\n\t\t);\n\t\tthis.setState({ importantPeople });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{\n\t\t\t\tthis.state.importantPeople.map(person => (\n\t\t\t\t\t<div className='person' key={person.name}>\n\t\t\t\t\t\t{person.name} (#{person.rank})\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}</div>\n\t\t);\n\t}\n}","codeDefault":"","title":"Display a list of important people","desc":"We'd like to display a list of relevant people from different countries.\n\nWe have a couple of endpoints:\n\n- `/rest/important-people`: returns a list of `id` of relevant people.\n\n- `/rest/important-people/<id>`: returns the details (name and relevance rank) of the person represented by the `id`."},{"code":"","target":[{"code":"[{\n\tit: 'BrexitDeal displays the details of the arrangement',\n\tresponse: {  status: 200, body: 'Thomas the Tank Engine knows it' },\n\tresult: 'Great! Thomas the Tank Engine knows it'\n}, {\n\tit: 'BrexitDeal fails to process the request',\n\tresponse: { status: 403, body: 'Something went wrong' },\n\tresult: 'Something went wrong, please try again in 2 months'\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst mockApiResponse = () => {\n\t\t\tlet { body, status } = scenario.response;\n\t\t\treturn new global.Response(JSON.stringify(body), { status });\n\t\t};\n\n\t\tsinon.stub(global, 'fetch');\n\t\tglobal.fetch\n\t\t\t.withArgs('/rest/brexit-deal')\n\t\t\t.returns(Promise.resolve(mockApiResponse()));\n\n\t\t//when\n\t\tconst wrapper = shallow(<BrexitDeal />);\n\t\tconst getDealButton = () => wrapper.find('button');\n\t\tconst getMessage = () => wrapper.find('[data-message]');\n\n\t\t//then\n\t\texpect(getDealButton().text()).to.equal('Get deal!');\n\t\texpect(getMessage().text())\n\t\t\t.to.equal('Click on the button to proceed');\n\n\t\t//when\n\t\tgetDealButton().simulate('click');\n\n\t\t//then\n\t\texpect(getMessage().text()).to.equal('Loading...');\n\t\texpect(global.fetch).to.have.callCount(1);\n\t\t\n\t\t//when\n\t\tsetImmediate(() => {\n\t\t\t\n\t\t\t//then\n\t\t\texpect(getMessage().text()).to.equal(scenario.result);\n\n\t\t\t//cleanup\n\t\t\tglobal.fetch.restore();\n\t\t});\n\t});\n});"}],"title":"Get the Brexit deal!","codeDefault":"","codeSolution":"class BrexitDeal extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.stages = { idle: 'idle', loading: 'loading', error: 'error' };\n\t\tthis.state = { deal: '', error: '', stage: this.stages.idle };\n\t}\n\n\tgetDeal() {\n\t\tlet { idle, loading, error } = this.stages;\n\t\tthis.setState({ stage: loading });\n\t\tfetch('/rest/brexit-deal')\n\t\t\t.then(response => {\n\t\t\t\treturn response.json().then(body => {\n\t\t\t\t\treturn response.ok ?\n\t\t\t\t\t\tPromise.resolve(body) :\n\t\t\t\t\t\tPromise.reject(body);\t\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(deal => this.setState({ deal, stage: idle }))\n\t\t\t.catch(msg => this.setState({ error: msg, stage: error }));\n\t}\n\n\trender() {\n\t\tlet { deal, stage, error } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={() => this.getDeal()}>Get deal!</button>\n\t\t\t\t<div data-message>{\n\t\t\t\t\tdeal ?\n\t\t\t\t\t\t`Great! ${deal}` :\n\t\t\t\t\t\tstage === this.stages.loading ?\n\t\t\t\t\t\t\t'Loading...' :\n\t\t\t\t\t\t\tstage === this.stages.error ?\n\t\t\t\t\t\t\t\t`${error}, please try again in 2 months` :\n\t\t\t\t\t\t\t\t'Click on the button to proceed'\n\t\t\t\t}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"By popular demand, we've been asked to  create a component to display the details of the Brexit deal."},{"code":"","target":[{"code":"[{\n\tit: 'MovieDB displays a list of action movies',\n\tgenre: 'action',\n\tresults: [\n\t\t{ title: 'RoboCop', year: 1987 },\n\t\t{ title: 'Total Recall', year: 1990 },\n\t\t{ title: 'Starship Troopers', year: 1997 }\n\t]\n}, {\n\tit: 'MovieDB displays a list of thriller movies',\n\tgenre: 'thriller',\n\tresults: [\n\t\t{ title: 'Basic Instinct', year: 1992 }\n\t]\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst { genre, results } = scenario;\n\t\tconst movies = [\n\t\t\t{ title: 'RoboCop', genre: 'action', year: 1987 },\n\t\t\t{ title: 'Basic Instinct', genre: 'thriller', year: 1992 },\n\t\t\t{ title: 'Total Recall', genre: 'action', year: 1990 },\n\t\t\t{ title: 'Starship Troopers', genre: 'action', year: 1997 }\n\t\t];\n\n\t\tconst directorId = '5c98b903358';\n\t\tconst wrapper = shallow(<MovieDB directorId={directorId} />);\n\t\tconst getGenreSelector = () => wrapper.find('select');\n\t\tconst getMovies = () => wrapper.find('.movie');\n\t\tconst endpoint = `/rest/movies/${directorId}?genre=${genre}`;\n\n\t\tconst mockApiResponse = () => {\n\t\t\tlet search = endpoint.split('?')[1];\n\t\t\tlet params = new URLSearchParams(search);\n\t\t\tlet genre = params.get('genre');\n\t\t\tlet body = movies.filter(movie => movie.genre === genre);\n\t\t\tlet status = 200;\n\t\t\treturn new global.Response(JSON.stringify(body), { status });\n\t\t};\n\n\t\tsinon.stub(global, 'fetch');\n\t\tglobal.fetch\n\t\t\t.withArgs(endpoint)\n\t\t\t.returns(Promise.resolve(mockApiResponse()));\n\n\t\t//when\n\t\tgetGenreSelector()\n\t\t\t.simulate('change', { target: { value: genre }});\n\n\t\t//and\n\t\tsetImmediate(() => {\n\n\t\t\t//then\n\t\t\texpect(getMovies()).to.have.length(results.length);\n\t\t\tresults.forEach((result, index) => {\n\t\t\t\texpect(getMovies().at(index).text())\n\t\t\t\t\t.to.equal(`${result.title} (${result.year})`);\n\t\t\t});\n\n\t\t\t//cleanup\n\t\t\tglobal.fetch.restore();\n\t\t});\n\t});\n});"}],"title":"Show Paul Verhoeven masterpieces","codeDefault":"","desc":"We love Paul Verhoeven, probably one of the greatest (and underrated) directors of Hollywood movies in history.\n\nLet's pay tribute by displaying a list of relevant movies, organised by genre.","codeSolution":"class MovieDB extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { genre: '', movies: [] };\n\t}\n\n\tasync setGenre(e) {\n\t\tlet directorId = this.props.directorId;\n\t\tlet genre = e.target.value;\n\t\tlet url = `/rest/movies/${directorId}?genre=${genre}`;\n\t\tlet movies = await fetch(url).then(response => response.json());\n\t\tthis.setState({ genre, movies });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<select \n\t\t\t\t\tvalue={this.state.genre}\n\t\t\t\t\tonChange={e => this.setGenre(e)} >\n\t\t\t\t\t<option value='action'>Action</option>\n\t\t\t\t\t<option value='horror'>Horror</option>\n\t\t\t\t</select>\n\t\t\t\t{\n\t\t\t\t\tthis.state.movies.map(movie => (\n\t\t\t\t\t\t<div className='movie' key={movie.title}>\n\t\t\t\t\t\t\t{movie.title} ({movie.year})\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}"},{"code":"","target":[{"code":"[{\n\tit: 'CoolWords finds all the words containing \"ac\"',\n\tq: 'ac',\n\tresults: ['abracadabra', 'accoutrements']\n}, {\n\tit: 'CoolWords finds all the words containing \"ad\"',\n\tq: 'ad',\n\tresults: ['abracadabra', 'adagio', 'aficionado']\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst words = [\n\t\t\t'abecedarian', 'abracadabra', 'accoutrements', 'adagio',\n\t\t\t'aficionado', 'agita', 'agog', 'akimbo', 'alfresco', 'aloof',\n\t\t\t'ambrosial', 'amok', 'ampersand', 'anemone', 'anthropomorphic'\n\t\t];\n\n\t\tconst endpoint = `/rest/cool-words?q=${scenario.q}`;\n\t\tconst mockApiResponse = () => {\n\t\t\tlet search = endpoint.split('?')[1];\n\t\t\tlet params = new URLSearchParams(search);\n\t\t\tlet body = words\n\t\t\t\t.filter(word => word.includes(params.get('q')));\n\t\t\tlet status = 200;\n\t\t\treturn new global.Response(JSON.stringify(body), { status });\n\t\t};\n\n\t\tsinon.stub(global, 'fetch');\n\t\tglobal.fetch\n\t\t\t.withArgs(endpoint)\n\t\t\t.returns(Promise.resolve(mockApiResponse()));\n\n\n\n\t\tconst wrapper = shallow(<CoolWords />);\n\t\tconst getSearchInput = () => wrapper.find('input[type=\"text\"]');\n\t\tconst getWords = () => wrapper.find('.word');\n\t\tconst getResultsMessage = () => wrapper.find('.results');\n\n\t\t//when\n\t\tgetSearchInput().simulate('change', { target: { value: 'a' }});\n\t\t\n\t\t//then\n\t\texpect(global.fetch).to.have.callCount(0);\n\t\texpect(getResultsMessage().text())\n\t\t\t.to.equal('Please type at least 2 characters');\n\n\t\t//when\n\t\tgetSearchInput()\n\t\t\t.simulate('change', { target: { value: scenario.q }});\n\n\t\t//and\n\t\tsetImmediate(() => {\n\n\t\t\t//then\n\t\t\texpect(getWords()).to.have.length(scenario.results.length);\n\t\t\tscenario.results.forEach((result, index) => {\n\t\t\t\texpect(getWords().at(index).text()).to.equal(result);\n\t\t\t});\n\t\t\texpect(getResultsMessage().text())\n\t\t\t\t.to.equal(`${scenario.results.length} results found`);\n\n\t\t\t//when\n\t\t\tgetSearchInput().simulate('change', { target: { value: 'a' }});\n\t\t\n\t\t\t//then\n\t\t\texpect(global.fetch).to.have.callCount(1);\n\t\t\texpect(getResultsMessage().text())\n\t\t\t\t.to.equal('Please type at least 2 characters');\n\n\t\t\t//cleanup\n\t\t\tglobal.fetch.restore();\n\t\t});\n\t});\n});"}],"title":"Create a cool words search engine","desc":"All writers love language. And we especially love fun words, don’t we? \n\nPlease create a mechanism to search & display cool words.","codeDefault":"","codeSolution":"class CoolWords extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { q: '', words: [] };\n\t}\n\n\tasync setQuery(e) {\n\t\tlet q = e.target.value;\n\t\tif(q.length >= 2) {\n\t\t\tlet url = `/rest/cool-words?q=${q}`;\n\t\t\tlet words = await fetch(url).then(response => response.json());\n\t\t\tthis.setState({ q, words });\n\t\t} else {\n\t\t\tthis.setState({ q });\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { q, words } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='text' value={q}\n\t\t\t\t\tonChange={e => this.setQuery(e)} />\n\t\t\t\t{\n\t\t\t\t\tq.length >= 2 &&\n\t\t\t\t\twords.map(word => (\n\t\t\t\t\t\t<div className='word' key={word}>{word}</div>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t\t<label className='results'>{\n\t\t\t\t\tq.length >= 2 ? \n\t\t\t\t\t\t`${words.length} results found` :\n\t\t\t\t\t\t`Please type at least 2 characters`\n\t\t\t\t}</label>\n\t\t\t</div>\n\t\t);\n\t}\n}"}],"title":"Backend communication"},{"level":"senior","stack":"reactjs","symbol":"<->","tests":[{"code":"","target":[{"code":"it('Log reports different events of the component lifecycle', () => {\n\n\t//given\n\tconst levels = { INFO: 'INFO', WARN: 'WARN' };\n\tconst log = { info: sinon.stub(), warn: sinon.stub() };\n\n\t//when\n\tconst wrapper = mount(<Log log={log} level={levels.INFO} />);\n\n\t//then\n\texpect(log.info).to.have.been.calledWith('mounted');\n\texpect(log.info).to.have.callCount(1);\n\texpect(log.warn).to.have.callCount(0);\n\t\n\t//when\n\twrapper.setProps({ level: levels.WARN });\n\n\t//then\n\texpect(log.info)\n\t\t.to.have.been.calledWith('will update', levels.WARN, levels.INFO);\n\texpect(log.warn)\n\t\t.to.have.been.calledWith('did update', levels.WARN, levels.INFO);\n\texpect(log.info).to.have.callCount(2);\n\texpect(log.warn).to.have.callCount(1);\n\t\n\t//when\n\twrapper.unmount();\n\n\t//then\n\texpect(log.warn).to.have.been.calledWith('will unmount', levels.WARN);\n\texpect(log.info).to.have.callCount(2);\n\texpect(log.warn).to.have.callCount(2);\n});"}],"title":"Log component lifecycle","desc":"We want to intercept some of the React lifecycle methods, by providing a log mechanism with 2 levels of sensitivity:\n\n- `INFO`\n- `WARN`","codeDefault":"","codeSolution":"class Log extends Component {\n\n\tupdateEvent(event, ...args) {\n\t\targs.unshift(event);\n\t\tlet level = this.props.level.toLowerCase();\n\t\tthis.props.log[level].apply(null, args);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.updateEvent('mounted');\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.updateEvent('will unmount', this.props.level);\n\t}\n\n\tcomponentWillUpdate(nextProps) {\n\t\tthis.updateEvent('will update', nextProps.level, this.props.level);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tthis.updateEvent('did update', this.props.level, prevProps.level);\n\t}\n\t\n\trender() {\n\t\treturn <div></div>;\n\t}\n}"},{"code":"","target":[{"code":"it('DOM manipulates the attributes of a node element', () => {\n\t\n\t//given\n\tlet node = null;\n\tconst wrapper = mount(<DOM onClick={n => node = n} />);\n\tconst button = wrapper.find('button');\n\n\t//when\n\tbutton.simulate('click');\n\n\t//then\n\texpect(node.getAttribute('key-1')).to.equal('value-1');\n\texpect(node.attributes.length).to.be.below(3);\n\t\n\t//when\n\tbutton.simulate('click');\n\n\t//then\n\texpect(node.getAttribute('key-2')).to.equal('value-2');\n\texpect(node.attributes.length).to.be.below(3);\n\t\n\t//when\n\tbutton.simulate('click');\n\n\t//then\n\texpect(node.getAttribute('key-3')).to.equal('value-3');\n\texpect(node.attributes.length).to.be.below(3);\n});"}],"title":"Mastering DOM manipulation","codeDefault":"","codeSolution":"class DOM extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.labelRef = React.createRef();\n\t\tthis.state = { clickCount: 0 };\n\t}\n\n\tsetAttribute() {\n\t\tlet labelNode = this.labelRef.current;\n\t\tlabelNode.removeAttribute(`key-${this.state.clickCount}`);\n\t\tthis.setState(\n\t\t\tprevState => ({ clickCount: ++prevState.clickCount }),\n\t\t\t() => {\n\t\t\t\tlet { clickCount } = this.state;\n\t\t\t\tlet key = `key-${clickCount}`;\n\t\t\t\tlet value = `value-${clickCount}`;\n\t\t\t\tlabelNode.setAttribute(key, value);\n\t\t\t\tthis.props.onClick(labelNode);\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<label a='1' ref={this.labelRef}>as</label>\n\t\t\t\t<button onClick={() => this.setAttribute()}>\n\t\t\t\t\tIncrease the counter\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We want to prove how good we are manipulating DOM elements.\n\nPlease add a label and a button to the React component; return the former when the latter is clicked.\n\nAfter each click, the label is expected to have a `key-${x}=value=${x}` attribute on it.\n\nPlease make sure the `key-${x-1}=value=${x-1}` one is deleted after each click on the button. "},{"code":"","target":[{"code":"[{\n\tit: 'Form displays a button and manages its text (Click to proceed)',\n\toriginalButtonText: 'Click to proceed', \n\tdisplayedButtonText: 'Click to proceed!',\n\tonButtonClickedText: 'Already clicked'\n}, {\n\tit: 'Form displays a button and manages its text (Click to submit)',\n\toriginalButtonText: 'Click to submit', \n\tdisplayedButtonText: 'Click to submit!',\n\tonButtonClickedText: 'Already clicked'\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\t\t\n\t\tconst { \n\t\t\toriginalButtonText, displayedButtonText, onButtonClickedText \n\t\t} = scenario;\n\t\tconst onSubmit = sinon.stub();\n\t\tconst wrapper = mount(\n\t\t\t<Form buttonText={originalButtonText} onSubmit={onSubmit}>\n\t\t\t\t<Button />\n\t\t\t</Form>\n\t\t);\n\n\t\tconst button = wrapper.find(Button);\n\n\t\texpect(button.props().buttonText).to.equal(displayedButtonText);\n\t\texpect(button.text()).to.equal(displayedButtonText);\n\n\t\texpect(onSubmit).to.have.callCount(0);\n\t\t\n\t\tbutton.simulate('click');\n\n\t\texpect(onSubmit).to.have.been.calledWith(onButtonClickedText);\n\t});\n});"}],"title":"Display a form with a button in it","desc":"We have a `Form`, and we'd like to add a `Button` to it.\n\nThe problem seems simple to solve, until we realise we have to deal with `props` of the `children` components!","codeDefault":"","codeSolution":"class Form extends Component {\n\trender() {\n\t\tconst children = React.Children.map(this.props.children, child => {\n\t\t\treturn React.cloneElement(child, {\n\t\t\t\tbuttonText: `${this.props.buttonText}!`,\n\t\t\t\tonSubmit: buttonText => this.props.onSubmit(buttonText)\n\t\t\t});\n\t\t});\n\t\treturn <div>{ children }</div>;\n\t}\n}\n\nclass Button extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<button onClick={() => this.props.onSubmit('Already clicked')}>\n\t\t\t\t{this.props.buttonText}\n\t\t\t</button>\n\t\t);\n\t}\n}"},{"code":"","target":[{"code":"const context = {\n\tonAddToCartClick: sinon.stub()\n};\n\nconst AddToCartContext = {\n\tConsumer(props) {\n\t\treturn props.children(context);\n\t} \n};\n\nit('function called on click', () => {\n\n\t//when\n\tconst wrapper = mount(<AddToCartButton />);\n\tconst getButton = () => wrapper.find('button');\n\n\t//then\n\texpect(getButton().text()).to.equal('Add to the cart');\n\texpect(context.onAddToCartClick).to.have.callCount(0);\n\n\t//when\n\tgetButton().simulate('click');\n\n\t//then\n\texpect(getButton().text()).to.equal('Added!');\n\texpect(context.onAddToCartClick)\n\t\t.to.have.been.calledWith('The item has been added to the basket');\n\n\t//when\n\tgetButton().simulate('click');\n\n\t//then\n\texpect(getButton().text()).to.equal('Add to the cart');\n\texpect(context.onAddToCartClick)\n\t\t.to.have.been.calledWith('The item is not on the basket');\n});"}],"title":"Add an item to the cart!","desc":"We got a well deserved salary of 1%. To celebrate that, we'd like to do some online shopping. \n\nWe haven't found any digital store good enough to satisfy or demanding requirements, so we've decided to build one by ourselves!","codeDefault":"","codeSolution":"class AddToCartButton extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { isSelected: false };\n\t}\n\n\tupdate(context) {\n\t\tthis.setState(\n\t\t\t{ isSelected: !this.state.isSelected },\n\t\t\t() => {\n\t\t\t\tlet message = this.state.isSelected ?\n\t\t\t\t\t'The item has been added to the basket' :\n\t\t\t\t\t'The item is not on the basket';\n\t\t\t\tcontext.onAddToCartClick(message);\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<AddToCartContext.Consumer>\n\t\t\t\t{context => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button onClick={() => this.update(context)}>{\n\t\t\t\t\t\t\tthis.state.isSelected ? \n\t\t\t\t\t\t\t\t'Added!' :\n\t\t\t\t\t\t\t\t'Add to the cart'\n\t\t\t\t\t\t}</button>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</AddToCartContext.Consumer>\n\t\t);\n\t}\n}"},{"code":"","target":[{"code":"[{\n\tit: 'Heaven sends an informative message to Hell ' +\n\t\t'and gets feedback from there via purgatory',\n\tmessage: 'here I am'\n}, {\n\tit: 'Heaven sends a question to Hell ' +\n\t\t'and gets feedback from there via purgatory',\n\tmessage: 'how are you doing'\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst message = scenario.message;\n\t\tconst onSubmit = sinon.stub();\n\t\tconst heaven = mount(\n\t\t\t<Heaven message={message} onSubmit={onSubmit} />\n\t\t);\n\t\tconst purgatory = heaven.find(Purgatory);\n\t\tconst hell = purgatory.find(Hell);\n\n\t\t//when\n\t\tconst getOutFromHeavenStub = sinon\n\t\t\t.stub(Heaven.prototype, 'getOutFromHeaven')\n\t\t\t.callThrough();\n\t\tconst getOutFromPurgatoryStub = sinon\n\t\t\t.stub(Purgatory.prototype, 'getOutFromPurgatory')\n\t\t\t.callThrough();\n\t\tconst getOutFromHellStub = sinon\n\t\t\t.stub(Hell.prototype, 'getOutFromHell')\n\t\t\t.callThrough();\n\n\t\t//then\n\t\texpect(purgatory.props().message).to.equal(`${message} indeed`);\n\t\texpect(hell.props().message).to.equal(`Yes, ${message} indeed`);\n\n\t\t//when\n\t\thell.find('button').simulate('click');\n\t\t\n\t\t//then\n\t\texpect(getOutFromHellStub)\n\t\t\t.to.have.been.calledWith(`Yes, ${message} indeed!`);\n\t\texpect(getOutFromPurgatoryStub)\n\t\t\t.to.have.been.calledWith(`Yes, ${message} indeed!!`);\n\t\texpect(getOutFromHeavenStub)\n\t\t\t.to.have.been.calledWith(`Yes, ${message} indeed!!!`);\n\t\texpect(onSubmit)\n\t\t\t.to.have.been.calledWith(`Yes, ${message} indeed!!!`);\n\t\t\t\n\t\t//cleanup\n\t\tgetOutFromHeavenStub.restore();\n\t\tgetOutFromPurgatoryStub.restore();\n\t\tgetOutFromHellStub.restore();\n\t});\n});\n"}],"title":"Callback hell!","codeDefault":"","codeSolution":"class Heaven extends Component {\n\n\tgetOutFromHeaven(message) {\n\t\tthis.props.onSubmit(message);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Purgatory \n\t\t\t\t\tmessage={`${this.props.message} indeed`} \n\t\t\t\t\tonSubmit={m => this.getOutFromHeaven(`${m}!`)} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Purgatory extends Component {\n\n\tgetOutFromPurgatory(message) {\n\t\tthis.props.onSubmit(message);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Hell \n\t\t\t\tmessage={`Yes, ${this.props.message}`} \n\t\t\t\tonSubmit={m => this.getOutFromPurgatory(`${m}!`)} />\n\t\t);\n\t}\n}\n\nclass Hell extends Component {\n\n\tgetOutFromHell(message) {\n\t\tthis.props.onSubmit(message);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<button onClick={() => {\n\t\t\t\tthis.getOutFromHell(`${this.props.message}!`);\n\t\t\t}}>\n\t\t\t\tClick\n\t\t\t</button>\n\t\t);\n\t}\n}\n","desc":"The so called 'callback hell' is a classic problem is async programming, making the code hard to read and (specially) maintain.\n\nLet's orchestrate some messaging across a bunch of components to making sure we can deal with it."}],"title":"Data handling"},{"level":"senior","stack":"reactjs","symbol":"<Link />","tests":[{"code":"","target":[{"code":"[{\n\tit: 'App shows landing page when the current path is \"/\"',\n\tcurrentPath: '/',\n\texpect: { \n\t\tlandingExists: true,\n\t\tportfolioExists: false,\n\t\tnotFoundExists: false, \n\t\ttext: 'Welcome to my webapp!'\n\t}\n}, {\n\tit: 'App shows portfolio page when the current path is \"/portfolio\"',\n\tcurrentPath: '/portfolio',\n\texpect: { \n\t\tlandingExists: false,\n\t\tportfolioExists: true,\n\t\tnotFoundExists: false, \n\t\ttext: 'This is my portfolio'\n\t}\n}, {\n\tit: 'App shows not found page when the current path is not registered',\n\tcurrentPath: '/projects',\n\texpect: { \n\t\tlandingExists: false,\n\t\tportfolioExists: false,\n\t\tnotFoundExists: true, \n\t\ttext: 'Oops, page not Found!'\n\t}\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = mount(\n\t\t\t<MemoryRouter initialEntries={[scenario.currentPath]}>\n\t\t\t\t<App/>\n\t\t\t</MemoryRouter>\n\t\t);\n\n\t\t//then\n\t\tlet { \n\t\t\tlandingExists, notFoundExists, portfolioExists, text \n\t\t} = scenario.expect;\n\t\texpect(wrapper.find(LandingPage).exists())\n\t\t\t.to.equal(landingExists);\n\t\texpect(wrapper.find(PortfolioPage).exists())\n\t\t\t.to.equal(portfolioExists);\n\t\texpect(wrapper.find(NotFoundPage).exists())\n\t\t\t.to.equal(notFoundExists);\n\t\texpect(wrapper.text()).to.equal(text);\n\t});\n});\n"}],"codeSolution":"class App extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={LandingPage} />\n\t\t\t\t\t<Route path='/portfolio' component={PortfolioPage} />\n\t\t\t\t\t<Route component={NotFoundPage} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nfunction LandingPage() {\n\treturn <div>Welcome to my webapp!</div>;\n}\n\nfunction PortfolioPage() {\n\treturn <div>This is my portfolio</div>;\n}\n\nfunction NotFoundPage() {\n\treturn <div>Oops, page not Found!</div>;\n}","codeDefault":"","title":"Create a routing system for our portfolio","desc":"We want to introduce a routing system, to redirect the users to the corresponding view depending on the current URL."},{"code":"","target":[{"code":"[{\n\tit: 'MoviesApp displays the home page when the current path is \"/\"',\n\tcurrentPath: '/',\n\texpect: { exists: { home: true }, text: 'Welcome to the Movies app' }\n}, {\n\tit: 'MoviesApp displays the home page for genre selection when ' + \n\t\t'the current path is \"/genres\"',\n\tcurrentPath: '/genres',\n\texpect: { \n\t\texists: { genres: true, genresHome: true }, \n\t\ttext: 'Please select a genre' \n\t}\n}, {\n\tit: 'MoviesApp displays the list of romance movies ' + \n\t\t'when the current path is \"/genres/romance\"',\n\tcurrentPath: '/genres/romance',\n\texpect: { \n\t\texists: { genres: true, romanceHome: true }, \n\t\ttext: 'A Star Is Born, The Notebook, La La Land' \n\t}\n}, {\n\tit: 'MoviesApp displays the list of drama movies ' + \n\t\t'when the current path is \"/genres/drama\"',\n\tcurrentPath: '/genres/drama',\n\texpect: { \n\t\texists: { genres: true, dramaHome: true }, \n\t\ttext: 'Black Panther, Moonlight, Metropolis' \n\t}\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst existsPage = page => scenario.expect.exists[page] === true;\n\n\t\t//when\n\t\tconst wrapper = mount(\n\t\t\t<MemoryRouter initialEntries={[scenario.currentPath]}>\n\t\t\t\t<MoviesApp />\n\t\t\t</MemoryRouter>\n\t\t);\n\n\t\t//then\n\t\texpect(wrapper.find(Home).exists()).to.equal(existsPage('home'));\n\t\texpect(wrapper.find(Genres).exists())\n\t\t\t.to.equal(existsPage('genres'));\n\t\texpect(wrapper.find(GenresHome).exists())\n\t\t\t.to.equal(existsPage('genresHome'));\n\t\texpect(wrapper.find(RomanceHome).exists())\n\t\t\t.to.equal(existsPage('romanceHome'));\n\t\texpect(wrapper.find(DramaHome).exists())\n\t\t\t.to.equal(existsPage('dramaHome'));\n\t\texpect(wrapper.text()).to.equal(scenario.expect.text);\n\t});\n});\n"}],"codeSolution":"class MoviesApp extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={Home} />\n\t\t\t\t\t<Route path='/genres' component={Genres} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nfunction Home() {\n\treturn <div>Welcome to the Movies app</div>;\n}\n\nfunction Genres(props) {\n\treturn (\n\t\t<div>\n\t\t\t<Route exact path={props.match.url} component={GenresHome} />\n\t\t\t<Route \n\t\t\t\tpath={`${props.match.url}/romance`} \n\t\t\t\tcomponent={RomanceHome} />\n\t\t\t<Route \n\t\t\t\tpath={`${props.match.url}/drama`}  \n\t\t\t\tcomponent={DramaHome} />\n\t\t</div>\n\t);\n}\n\nfunction GenresHome() {\n\treturn <div>Please select a genre</div>;\n}\n\nfunction RomanceHome() {\n\treturn <div>A Star Is Born, The Notebook, La La Land</div>;\n}\n\nfunction DramaHome() {\n\treturn <div>Black Panther, Moonlight, Metropolis</div>;\n}","codeDefault":"","title":"Create a movies app","desc":"We want to create a new app to display movies by genre.\n\nWe'd like to manage 4 view, for the time view:\n\n- Home\n- Genres home\n- Romance movies\n- Drama movies"},{"code":"","target":[{"code":"it('PortfolioApp navigates from: Home -> Projects -> About', () => {\n\n\t//given\n\tconst wrapper = mount(\n\t\t<MemoryRouter initialEntries={['/']}>\n\t\t\t<PortfolioApp/>\n\t\t</MemoryRouter>\n\t);\n\n\t//when\n\tconst getHome = () => wrapper.find(Home);\n\tconst getProjects = () => wrapper.find(Projects);\n\tconst getAbout = () => wrapper.find(About);\n\tconst getProjectsLink = () => getHome().find('Link[to=\"/projects\"] a');\n\tconst getAboutLink = () => getProjects().find('Link[to=\"/about\"] a');\n\n\t//then\n\texpect(getHome().exists()).to.equal(true);\n\texpect(getProjects().exists()).to.equal(false);\n\texpect(getAbout().exists()).to.equal(false);\n\texpect(getProjectsLink().text()).to.equal('Projects');\n\texpect(getProjectsLink().prop('href')).to.equal('/projects');\n\n\t//when\n\tgetProjectsLink().simulate('click');\n\n\t//then\n\texpect(getHome().exists()).to.equal(false);\n\texpect(getProjects().exists()).to.equal(true);\n\texpect(getAbout().exists()).to.equal(false);\n\texpect(getAboutLink().text()).to.equal('About');\n\texpect(getAboutLink().prop('href')).to.equal('/about');\n\n\t//when\n\tgetAboutLink().simulate('click');\n\n\t//then\n\texpect(getHome().exists()).to.equal(false);\n\texpect(getProjects().exists()).to.equal(false);\n\texpect(getAbout().exists()).to.equal(true);\n\texpect(getAbout().text()).to.equal('About me');\n});"}],"codeSolution":"class PortfolioApp extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={Home} />\n\t\t\t\t\t<Route path='/projects' component={Projects} />\n\t\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nconst Home = (props) => <Link to='/projects' {...props}>Projects</Link>;\nconst Projects = (props) => <Link to='/about' {...props}>About</Link>;\nconst About = () => <div>About me</div>;\n\nclass Link extends Component {\n\n\tnavigate() {\n\t\tthis.props.history.push(this.props.to);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<label>\n\t\t\t\t<a href={this.props.to} onClick={() => this.navigate()}>{\n\t\t\t\t\tthis.props.children\t\n\t\t\t\t}</a>\n\t\t\t</label>\n\t\t);\n\t}\n}","title":"Create the structure of a Portfolio App","codeDefault":"","desc":"We know how important the portfolio is to break into the market. Please create an app with 3 views:\n\n- Home (To navigate to Portfolio)\n- Portfolio (To navigate to About)\n\nEven though `react-router-dom` offers the `Link` component, we're not allowed to importing it here, so you are expected to create it by yourself. Please encapsulate an `a` tag that, on click, pushes the target url to the `history` object passed by `Route`."},{"code":"","target":[{"code":"[{\n\tit: 'Countries display details for France',\n\tcurrentPath: '/countries/fr',\n\texpect: { name: 'France', population: '67.19 million' }\n}, {\n\tit: 'Countries display details for Spain',\n\tcurrentPath: '/countries/es',\n\texpect: { name: 'Spain', population: '46.53 million' }\n}, {\n\tit: 'Countries display details for Italy',\n\tcurrentPath: '/countries/it',\n\texpect: { name: 'Italy', population: '60.59 million' }\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst list = [\n\t\t\t{ code: 'it', name: 'Italy', population: '60.59 million' },\n\t\t\t{ code: 'fr', name: 'France', population: '67.19 million' },\n\t\t\t{ code: 'es', name: 'Spain', population: '46.53 million' }\n\t\t];\n\n\t\t//when\n\t\tconst wrapper = mount(\n\t\t\t<MemoryRouter initialEntries={[scenario.currentPath]}>\n\t\t\t\t<Countries list={list} />\n\t\t\t</MemoryRouter>\n\t\t);\n\t\tconst country = wrapper.find(Country);\n\t\tconst countryName = country.find('.name');\n\t\tconst countryPopulation = country.find('.population');\n\n\t\t//then\n\t\texpect(countryName.text()).to.equal(scenario.expect.name);\n\t\texpect(countryPopulation.text())\n\t\t\t.to.equal(scenario.expect.population);\n\t});\n});"}],"title":"Display country details","codeSolution":"class Countries extends Component {\n\n\trender() {\n\t\tlet list = this.props.list;\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route \n\t\t\t\t\t\tpath='/countries/:code' \n\t\t\t\t\t\trender={props => (\n\t\t\t\t\t\t\t<Country {...props} list={list} />\n\t\t\t\t\t\t)} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nclass Country extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { country: {} };\n\t}\n\n\tcomponentDidMount() {\n\t\tlet country = this.props.list.find(country => {\n\t\t\treturn country.code === this.props.match.params.code;\n\t\t});\n\t\tthis.setState({ country });\n\t}\n\n\trender() {\n\t\tlet country = this.state.country;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className='name'>{country.name}</div>\n\t\t\t\t<div className='population'>{country.population}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We have a countries database, and we'd like to create an app to display the details of each nation.","codeDefault":""},{"code":"","target":[{"code":"[{\n\tit: 'RacingDB has already indexed F1 in 1971',\n\tcurrentPath: '/results/f1/1971',\n\texpected: { results: true }\n}, {\n\tit: 'RacingDB has already indexed MotoGP in 1971',\n\tcurrentPath: '/results/motogp/1990',\n\texpected: { results: true }\n}, {\n\tit: 'RacingDB has not indexed MotoGP in 1949 yet',\n\tcurrentPath: '/results/motogp/1949',\n\texpected: { results: false }\n}, {\n\tit: 'RacingDB has not indexed Nascar yet',\n\tcurrentPath: '/results/nascar/1984',\n\texpected: { results: false }\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tconst wrapper = mount(\n\t\t\t<MemoryRouter initialEntries={[scenario.currentPath]}>\n\t\t\t\t<RacingDB />\n\t\t\t</MemoryRouter>\n\t\t);\n\n\t\t//when\n\t\tconst resultsPage = wrapper.find(ResultsPage);\n\t\tconst notFoundPage = wrapper.find(NotFoundPage);\n\n\t\t//then\n\t\tif(scenario.expected.results) {\n\t\t\texpect(resultsPage.exists()).to.equal(true);\n\t\t\texpect(resultsPage.text()).to.equal(\n\t\t\t\t'Competition and year correctly indexed'\n\t\t\t);\n\t\t\texpect(notFoundPage.exists()).to.equal(false);\n\t\t} else {\n\t\t\texpect(resultsPage.exists()).to.equal(false);\n\t\t\texpect(notFoundPage.exists()).to.equal(true);\n\t\t\texpect(notFoundPage.text()).to.equal(\n\t\t\t\t'Results for that competition and year are not available'\n\t\t\t);\n\t\t}\n\t});\n});"}],"codeSolution":"class RacingDB extends Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route \n\t\t\t\t\t\tpath='/results/:competition/:year' \n\t\t\t\t\t\tcomponent={ResultsPage} />\n\t\t\t\t\t<Route \n\t\t\t\t\t\tpath='/not-found'\n\t\t\t\t\t\tcomponent={NotFoundPage} />\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nclass ResultsPage extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { results: [], redirect: false };\n\t}\n\n\tisValidCompetition(competition) {\n\t\treturn competition === 'f1' || competition === 'motogp';\n\t}\n\n\tisValidYear(year) {\n\t\treturn Number(year) >= 1971 && Number(year) <= 2006;\n\t}\n\n\tcomponentDidMount() {\n\t\tlet { competition, year } = this.props.match.params;\n\t\tif(\n\t\t\t!this.isValidCompetition(competition) || \n\t\t\t!this.isValidYear(year)\n\t\t) {\n\t\t\tthis.setState({ redirect: true });\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{\n\t\t\t\tthis.state.redirect ?\n\t\t\t\t\t<Redirect to='/not-found' /> :\n\t\t\t\t\t<div>Competition and year correctly indexed</div>\n\t\t\t}</div>\n\t\t);\n\t}\n}\n\nfunction NotFoundPage() {\n\treturn (\n\t\t<div>\n\t\t\tResults for that competition and year are not available\n\t\t</div>\n\t);\n}","codeDefault":"","title":"Create a racing database app","desc":"We've spent a while collecting data from different competitions (F1 and MotoGP) and years (since 1971 to 2006).\n\nPlease determine, based on the current URL, whether the combination of competition + year is available on the system or not."}],"title":"Routing"},{"level":"medium","stack":"reactjs","symbol":"<C />","tests":[{"code":"class CaptainTsubasaPlayer extends React.Component {\n\n}","target":[{"code":"it('CaptainTsubasaPlayer displays details for Kojiro Hyuga', () => {\n\n\t//given\n\tconst wrapper = mount(<CaptainTsubasaPlayer />);\n\n\t//when\n\tconst name = wrapper.find(Name);\n\tconst position = wrapper.find(Position);\n\n\t//then\n\texpect(wrapper.state().name).to.equal('Kojiro Hyuga');\n\texpect(wrapper.state().position).to.equal('Forward');\n\n\t//and\n\texpect(name.props().name).to.equal('Kojiro Hyuga');\n\texpect(name.text()).to.equal('Name: Kojiro Hyuga');\n\n\t//and\n\texpect(position.props().position).to.equal('Forward');\n\texpect(position.text()).to.equal('Position: Forward');\n});"}],"title":"Captain Tsubasa!","codeDefault":"class CaptainTsubasaPlayer extends React.Component {\n\n}","codeSolution":"class CaptainTsubasaPlayer extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { name: 'Kojiro Hyuga', position: 'Forward' };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Name name={this.state.name} />\n\t\t\t\t<Position position={this.state.position} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Name(props) {\n\treturn <div>Name: {props.name}</div>;\n}\n\nfunction Position({ position }) {\n\treturn <div>Position: {position}</div>;\n}","desc":"If you were born in the 80s or before, you probably remember Captain Tsubasa, one of the greatest Japanese anime in history.\n\nTo pay a sort of tribute, we'd like to create a players database, to display details such as the name and the position of the legends."},{"code":"class Walkman extends React.Component {\n\n}\n\nconst SideA = () => <div></div>;\nconst SideB = () => <div></div>;","target":[{"code":"it('Walkman proves how cool were the 90s', () => {\n\n\t//given\n\tconst wrapper = mount(<Walkman />);\n\n\t//when\n\tconst getSideA = () => wrapper.find(SideA);\n\tconst getSideB = () => wrapper.find(SideB);\n\tconst getToggleSideButton = () => wrapper.find('button');\n\n\t//then\n\texpect(getSideA().exists()).to.equal(true);\n\texpect(getSideA().text()).to.equal('Spice Girls');\n\texpect(getSideB().exists()).to.equal(false);\n\n\t//when\n\tgetToggleSideButton().simulate('click');\n\n\t//then\n\texpect(getSideA().exists()).to.equal(false);\n\texpect(getSideB().exists()).to.equal(true);\n\texpect(getSideB().text()).to.equal('Back Street Boys');\n});"}],"title":"Create a walkman component :)","codeDefault":"class Walkman extends React.Component {\n\n}\n\nconst SideA = () => <div></div>;\nconst SideB = () => <div></div>;","codeSolution":"class Walkman extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { isSideB: false };\n\t}\n\n\tswitchSide() {\n\t\tthis.setState({ isSideB: !this.state.isSideB });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={() => this.switchSide()}>\n\t\t\t\t\tSwitch side\n\t\t\t\t</button>\n\t\t\t\t{ this.state.isSideB ? <SideB /> : <SideA />}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst SideA = () => <div>Spice Girls</div>;\nconst SideB = () => <div>Back Street Boys</div>;","desc":"The 90's are cool again!\n\nWe've found a cassette tape, and we'd like to implement a 'walkman-like' mechanism to:\n\n1) Check which side is active\n2) Check the content of the active side\n3) Toggle the active side"},{"code":"class EurovisionResults extends React.Component {\n\n}","target":[{"code":"it('EurovisionResults fetches and displays some results', async () => {\n\n\t//given\n\tconst wrapper = mount(<EurovisionResults />);\n\n\t//when\n\tconst getLoading = () => wrapper.find(Loading);\n\tconst getResults = () => wrapper.find('Results');\n\n\t//then\n\texpect(getLoading().exists()).to.equal(true);\n\texpect(getLoading().text()).to.equal('Loading results...');\n\texpect(getResults().exists()).to.equal(false);\n\n\t//when\n\tawait new Promise(resolve => setTimeout(resolve, 500));\n\twrapper.update();\n\n\t//then\n\texpect(getLoading().exists()).to.equal(false);\n\texpect(getResults().exists()).to.equal(true);\n\texpect(getResults().text()).to.equal(\n\t\t'1. Israel (529p), 2. Cyprus (436p), 3. Austria (342p)'\n\t);\n});"}],"title":"Eurovision contest is back!","codeDefault":"class EurovisionResults extends React.Component {\n\n}","desc":"We know you can't wait until the next Eurovision contest, which clearly is the most important cultural event in The Old Continent.\n\nOn render, we'd like to simulate data fetching from the backend (by displaying a loading message) and, after half a second, then please show some results.","codeSolution":"class EurovisionResults extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { isLoading: true };\n\t}\n\n\tcomponentDidMount() {\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ isLoading: false });\n\t\t}, 500);\n\t}\n\n\trender() {\n\t\treturn this.state.isLoading ? <Loading /> : <Results />;\n\t}\n}\n\nconst Loading = () => <div>Loading results...</div>;\nconst Results = () => (\n\t<div>1. Israel (529p), 2. Cyprus (436p), 3. Austria (342p)</div>\n);"},{"code":"function WordOfMouth({ message }) {\n\treturn <FriendA message={message} />;\n}","target":[{"code":"[{\n\tit: 'WordOfMouth distorts a message about a potential new Xbox',\n\tmessage: 'New Xbox?', \n\twhatFriendASays: 'New Xbox!', \n\twhatFriendBSays: 'New Xbox on the 7th'\n}, {\n\tit: 'WordOfMouth distorts a message about a new concert of The Boss',\n\tmessage: 'Bruce Springsteen is coming to London?', \n\twhatFriendASays: 'Bruce Springsteen is coming to London!', \n\twhatFriendBSays: 'Bruce Springsteen is coming to London on the 7th'\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tlet wrapper = mount(<WordOfMouth message={scenario.message} />);\n\t\tlet friendA = wrapper.find(FriendA);\n\t\tlet friendB = friendA.find(FriendB);\n\t\tlet friendC = friendB.find(FriendC);\n\n\t\t//then\n\t\texpect(friendA.props().message).to.equal(scenario.message);\n\t\texpect(friendB.props().message).to.equal(scenario.whatFriendASays);\n\t\texpect(friendC.props().message).to.equal(scenario.whatFriendBSays);\n\t});\n});"}],"title":"Word of mouth can be dangerous!","codeDefault":"function WordOfMouth({ message }) {\n\treturn <FriendA message={message} />;\n}","desc":"Word of mouth or viva voce, is the passing of information from person to person by oral communication.\n\nSome people says that's the best way to e.g. promote a business, but it has some risks too, as e.g. info can easily be distorted.","codeSolution":"function WordOfMouth({ message }) {\n\treturn <FriendA message={message} />;\n}\n\nfunction FriendA({ message }) {\n\treturn <FriendB message={message.replace(/\\?/g, '!')} />;\n}\n\nfunction FriendB({ message }) {\n\treturn (\n\t\t<FriendC message={message.replace(/!/g, ' on the 7th')} />\n\t);\n}\n\nfunction FriendC() {\n\treturn <div />;\n}"},{"code":"class MarkAsRead extends React.Component {\n\n}","target":[{"code":"it('EmailClient sets a button to mark an email as read', () => {\n\n\t//given\n\tconst wrapper = mount(<EmailClient />);\n\tconst markAsReadButton = wrapper.find(MarkAsReadButton);\n\n\t//then\n\texpect(wrapper.state().markedAsRead).to.equal(false);\n\n\t//when\n\tmarkAsReadButton.simulate('click');\n\n\t//then\n\texpect(wrapper.state().markedAsRead).to.equal(true);\n});"}],"title":"Mark an email as read","codeDefault":"class MarkAsRead extends React.Component {\n\n}","codeSolution":"class EmailClient extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { markedAsRead: false };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<MarkAsReadButton onButtonPressed={() => {\n\t\t\t\tthis.setState({ markedAsRead: true });\n\t\t\t}} />\n\t\t);\n\t}\n}\n\nfunction MarkAsReadButton({ onButtonPressed }) {\n\treturn <button onClick={onButtonPressed} />;\n}","desc":"We are creating a new, shiny email client.\n\nWe'd like to add a button to mark all the emails as read, in one go."}],"title":"Composing components"},{"level":"medium","stack":"reactjs","symbol":"state()","tests":[{"code":"class HelloState extends React.Component {\n\n}","target":[{"code":"it('HelloState displays a message from the state', () => {\n\n\t//when\n\tconst wrapper = shallow(<HelloState />);\n\n\t//then\n\texpect(wrapper.state().message).to.equal('Hello state!');\n\texpect(wrapper.text()).to.equal('Hello state!');\n});"}],"title":"Display a message from the component state","codeSolution":"class HelloState extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { message: 'Hello state!' }; \n\t}\n\n\trender() {\n\t\treturn <div>{this.state.message}</div>;\n\t}\n}","codeDefault":"class HelloState extends React.Component {\n\n}","desc":"Let's play with the state!\n\nThis mechanism is vital in React towards maintaining your UI up to date.\n\nThe requested steps are:\n\n1) Create a `state` as part of the `constructor` method (don't forget to invoke `super`!\n2) Display the created property of the state into the `render` method"},{"code":"class AverageScore extends React.Component {\n\n}","target":[{"code":"it('AverageScore display the rounded score of a player', () => {\n\n\t//when\n\tconst wrapper = shallow(<AverageScore />);\n\tconst state = wrapper.state();\n\n\t//then\n\texpect(state.firstScore).to.equal(78);\n\texpect(state.secondScore).to.equal(81);\n\texpect(wrapper.text()).to.equal('The average score is: 80');\n});"}],"title":"Display the average score of a player","codeDefault":"class AverageScore extends React.Component {\n\n}","codeSolution":"class AverageScore extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { firstScore: 78, secondScore: 81 }; \n\t}\n\n\trender() {\n\t\tlet { firstScore, secondScore } = this.state;\n\t\tlet average = Math.round((firstScore + secondScore) / 2);\n\t\treturn <div>The average score is: {average}</div>;\n\t}\n}","desc":"We want to know what's the score of a given player.\n\nIn that respect, our component will maintain two state properties:\n\n- `firstScore`\n- `secondScore`\n\nPlease display the rounded average score."},{"code":"class AverageScore extends React.Component {\n\n}","target":[{"code":"it('AverageScore display the rounded score of a player', () => {\n\n\t//when\n\tconst wrapper = shallow(<AverageScore newScore={61} />);\n\tconst state = wrapper.state();\n\n\t//then\n\texpect(state.firstScore).to.equal(78);\n\texpect(state.secondScore).to.equal(81);\n\texpect(wrapper.text()).to.equal('The average score is: 73');\n});"}],"title":"Display the average score of a player after completing a challenge","codeDefault":"class AverageScore extends React.Component {\n\n}","codeSolution":"class AverageScore extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { firstScore: 78, secondScore: 81 }; \n\t}\n\n\trender() {\n\t\tlet { firstScore, secondScore } = this.state;\n\t\tlet newScore = this.props.newScore;\n\t\tlet average = Math.round((firstScore + secondScore + newScore) / 3);\n\t\treturn <div>The average score is: {average}</div>;\n\t}\n}","desc":"We want to know what's the score of a given player, after completing a challenge.\n\nIn that respect, our component will maintain two state properties:\n\n- `firstScore`\n- `secondScore`\n\nAdditionally, we also want to incorporate to the calculation the newly obtained score, passed as a new prop to the component, called `newScore`.\n\nPlease display the rounded average score."},{"code":"class Calc extends React.Component {\n\n}","target":[{"code":"[{\n\tit: `Adds the numbers if the 'add' operation is passed`,\n\toperation: 'add',\n\texpected: 'The result is: 11'\n}, {\n\tit: `Subtracts the numbers if the 'subtract' operation is passed`,\n\toperation: 'subtract',\n\texpected: 'The result is: 3'\n}, {\n\tit: 'Displays an error if the passed operation is not supported',\n\toperation: 'multiply',\n\texpected: 'This operation is not supported yet!'\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(\n\t\t\t<Calc operation={scenario.operation} />\n\t\t);\n\t\tconst state = wrapper.state();\n\n\t\t//then\n\t\texpect(state.a).to.equal(7);\n\t\texpect(state.b).to.equal(4);\n\t\texpect(wrapper.text()).to.equal(scenario.expected);\n\t});\n});"}],"title":"Perform some math operations","codeSolution":"class Calc extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { a: 7, b: 4 }; \n\t}\n\n\trender() {\n\t\tlet { a, b } = this.state;\n\t\tlet result = this.props.operation === 'add' ? \n\t\t\t`The result is: ${a + b}` :\n\t\t\tthis.props.operation === 'subtract' ?\n\t\t\t\t`The result is: ${a - b}` :\n\t\t\t\t'This operation is not supported yet!';\n\t\treturn <div>{result}</div>;\n\t}\n}","codeDefault":"class Calc extends React.Component {\n\n}","desc":"We have a component with a couple of state props on it, `a` & `b`\n\nWe're also passing a prop, `operation`, to decide whether we want to add or subtract them.\n\nWe'd also like to display an error if the passed operation is not supported yet."},{"code":"class Calc extends React.Component {\n\n}","target":[{"code":"[{ \n\tit: 'Displays total=16 when a=7, b=4, c=5',\n\tc: 5, total: 16, expected: 'The total is: 16' \n}, {\n\tit: 'Displays total=9 when a=7, b=4, c=-2',\n\tc: -2, total: 9, expected: 'The total is: 9' \n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(<Calc c={scenario.c} />);\n\t\tconst state = wrapper.state();\n\n\t\t//then\n\t\texpect(state.a).to.equal(7);\n\t\texpect(state.b).to.equal(4);\n\t\texpect(state.total).to.equal(scenario.total);\n\t\texpect(wrapper.text()).to.equal(scenario.expected);\n\t});\n});"}],"codeSolution":"class Calc extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet state = { a: 7, b: 4 };\n\t\tstate.total = state.a + state.b + props.c;\n\t\tthis.state = state; \n\t}\n\n\trender() {\n\t\treturn <div>The total is: {this.state.total}</div>;\n\t}\n}","codeDefault":"class Calc extends React.Component {\n\n}","title":"Add new element to state","desc":"We have a component with two state numbers, `a` and `b`. We're also providing a third one as a prop, `c`.\n\nWe'd like to add a new state number, `total`, with the result of adding them all (`a` + `b` + `c`)."}],"title":"State"},{"level":"senior","stack":"reactjs","symbol":"<form />","tests":[{"code":"","target":[{"code":"it('SignIn allows to submit when email and pwd are provided', () => {\n\n\t//given\n\tconst wrapper = shallow(<SignIn />);\n\tconst getEmailInput = () => wrapper.find('input[type=\"email\"]');\n\tconst getPasswordInput = () => wrapper.find('input[type=\"password\"]');\n\tconst getSubmitButton = () => wrapper.find('input[type=\"submit\"]');\n\tconst setValue = (input, value) => {\n\t\tinput.simulate('change', { target: { value }});\n\t};\n\n\t//then the submit button is disabled by default\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when email is not valid, then the submit button is disabled\n\tsetValue(getEmailInput(), 'david');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when email is valid but no password, then submit is disabled\n\tsetValue(getEmailInput(), 'david@hasselhoff.com');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when email is valid but password <4 char, then submit is disabled\n\tsetValue(getPasswordInput(), 'abc');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\t\n\t//when password is valid but no email, then submit is disabled\n\tsetValue(getEmailInput(), '');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when both email and password are valid, then submit is enabled\n\tsetValue(getEmailInput(), 'david@hasselhoff.com');\n\tsetValue(getPasswordInput(), 'abcd');\n\texpect(getSubmitButton().prop('disabled')).to.equal(false);\n});"}],"title":"Sign In form","codeDefault":"","codeSolution":"class SignIn extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { email: '', password: '' };\n\t}\n\n\tupdateValue(input, e) {\n\t\tthis.setState({ [input]: e.target.value });\n\t}\n\n\tisValidEmail() {\n\t\tvar re = /\\S+@\\S+\\.\\S+/;\n\t\treturn re.test(this.state.email);\n\t}\n\n\tisValidPassword() {\n\t\treturn this.state.password && this.state.password.length > 3;\n\t}\n\n\tisFormEnabled() {\n\t\treturn this.isValidEmail() && this.isValidPassword();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='email' \n\t\t\t\t\tonChange={e => this.updateValue('email', e)} />\n\t\t\t\t<input \n\t\t\t\t\ttype='password' \n\t\t\t\t\tonChange={e => this.updateValue('password', e)} />\n\t\t\t\t<input type='submit' disabled={!this.isFormEnabled()}>\n\t\t\t\t\tSubmit\n\t\t\t\t</input>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We'd like to create a login form, with two fields: `email` and `password`.\n\nThe `submit` button will be enabled once both fields are valid."},{"code":"","target":[{"code":"it('ResetPassword allows user to set a new password', () => {\n\n\t//given\n\tconst wrapper = shallow(<ResetPassword />);\n\tconst getPasswordInput = () => wrapper.find('.password');\n\tconst getConfirmPasswordInput = () => wrapper.find('.confirmPassword');\n\tconst getSubmitButton = () => wrapper.find('input[type=\"submit\"]');\n\tconst setValue = (input, value) => {\n\t\tinput.simulate('change', { target: { value }});\n\t};\n\n\t//when password <4 char, then submit is disabled\n\tsetValue(getPasswordInput(), 'abc');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\t\n\t//when password is valid but not confirmed, then submit is disabled\n\tsetValue(getPasswordInput(), 'abcd');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when passwords dont match, then submit is disabled\n\tsetValue(getConfirmPasswordInput(), 'abcde');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when passwords match, then submit is enabled\n\tsetValue(getConfirmPasswordInput(), 'abcd');\n\texpect(getSubmitButton().prop('disabled')).to.equal(false);\n});"}],"title":"Reset password form","codeDefault":"","codeSolution":"class ResetPassword extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { password: '', confirmPassword: '' };\n\t}\n\n\tsetValue(input, e) {\n\t\tthis.setState({ [input]: e.target.value });\n\t}\n\n\tisValidPassword() {\n\t\treturn this.state.password && this.state.password.length > 3;\n\t}\n\n\tdoPasswordsMatch() {\n\t\treturn this.state.password === this.state.confirmPassword;\n\t}\n\n\tisFormEnabled() {\n\t\treturn this.isValidPassword() && this.doPasswordsMatch();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='password' className='password'\n\t\t\t\t\tonChange={e => this.setValue('password', e)} />\n\t\t\t\t<input \n\t\t\t\t\ttype='password' className='confirmPassword'\n\t\t\t\t\tonChange={e => this.setValue('confirmPassword', e)} />\n\t\t\t\t<input type='submit' disabled={!this.isFormEnabled()}>\n\t\t\t\t\tSubmit\n\t\t\t\t</input>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"Ooops, we've forgotten our password!\n\nNo problem at all, let's create a form to reset it :)"},{"code":"class Username extends React.Component {\n\n}","target":[{"code":"it('Username checks whether the entered text is valid or not', () => {\n\n\t//given\n\tconst existing = ['karl', 'charlotte'];\n\tconst forbidden = ['hitler', 'stalin'];\n\n\t//when\n\tconst wrapper = shallow(\n\t\t<Username existing={existing} forbidden={forbidden} />\n\t);\n\tconst getUsernameInput = () => wrapper.find('input[type=\"text\"]');\n\tconst getMessage = () => wrapper.find('label.message');\n\tconst getSubmitButton = () => wrapper.find('input[type=\"submit\"]');\n\n\t//then\n\texpect(getMessage().text()).to.equal('Please enter your username');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when the username already exists, then submission is disabled\n\tgetUsernameInput().simulate('change', { target: { value: 'karl' }});\n\texpect(getMessage().text()).to.equal('The username is already taken');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when the username is not allowed, then submission is disabled\n\tgetUsernameInput().simulate('change', { target: { value: 'Stalin' }});\n\texpect(getMessage().text()).to.equal('The username is not allowed');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when the username is valid, then submission is enabled\n\tgetUsernameInput().simulate('change', { target: { value: 'Oliver' }});\n\texpect(getMessage().text()).to.equal('The username is available!');\n\texpect(getSubmitButton().prop('disabled')).to.equal(false);\n});"}],"title":"Is my username available?","codeDefault":"class Username extends React.Component {\n\n}","codeSolution":"class Username extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { username: '' };\n\t}\n\n\tupdateUsername(e) {\n\t\tthis.setState({ username: e.target.value });\n\t}\n\n\tisValidUsername() {\n\t\treturn (\n\t\t\tthis.state.username && \n\t\t\t!this.hasBeenAlreadyTaken() && \n\t\t\t!this.isForbidden()\n\t\t);\n\t}\n\n\thasBeenAlreadyTaken() {\n\t\treturn this.props.existing\n\t\t\t.includes(this.state.username.toLowerCase());\n\t}\n\n\tisForbidden() {\n\t\treturn this.props.forbidden\n\t\t\t.includes(this.state.username.toLowerCase());\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='text' value={this.state.username}\n\t\t\t\t\tonChange={e => this.updateUsername(e)} />\n\t\t\t\t<label className='message'>{\n\t\t\t\t\tthis.hasBeenAlreadyTaken() ?\n\t\t\t\t\t\t'The username is already taken' :\n\t\t\t\t\t\tthis.isForbidden() ?\n\t\t\t\t\t\t\t'The username is not allowed' :\n\t\t\t\t\t\t\tthis.state.username ?\n\t\t\t\t\t\t\t\t'The username is available!' :\n\t\t\t\t\t\t\t\t'Please enter your username'\n\t\t\t\t}</label>\n\t\t\t\t<input type='submit' disabled={!this.isValidUsername()}>\n\t\t\t\t\tSubmit\n\t\t\t\t</input>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"There are 4.4 billion internet users in the world. Our favourite username is likely to be taken by someone else already!\n\nOn a given platform, please check whether it's available or not, based on:\n\n1) A list of existing usernames\n2) A list of forbidden usernames"},{"code":"","target":[{"code":"it('AgeCheck blocks sign up if user is under 18 years old', () => {\n\n\t//when\n\tconst wrapper = shallow(<AgeCheck />);\n\tconst getAgeSelector = () => wrapper.find('select');\n\tconst getMessage = () => wrapper.find('.message');\n\tconst getQuestion = () => wrapper.find('input[type=\"text\"]');\n\tconst getSubmitButton = () => wrapper.find('input[type=\"submit\"]');\n\n\t//then\n\texpect(getQuestion().exists()).to.equal(false);\n\texpect(getMessage().text()).to.equal('');\n\n\t//when age is <18, then user cannot sign up\n\tgetAgeSelector().simulate('change', { target: { value: '<18' }});\n\texpect(getQuestion().exists()).to.equal(false);\n\texpect(getMessage().text()).to.equal('Sorry, you must be 18+ to proceed');\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when age is >=18, then we ask a second question to check if it's true\n\tgetAgeSelector().simulate('change', { target: { value: '>=18' }});\n\texpect(getQuestion().exists()).to.equal(true);\n\texpect(getQuestion().props().placeholder)\n\t\t.to.equal('When did the German wall fall?');\n\texpect(getMessage().text()).to.equal('');\t\n\n\t//when the answer is wrong, then the user cannot sign up\n\tgetQuestion().simulate('change', { target: { value: '1988' }});\n\texpect(getMessage().text()).to.equal('Wrong answer!');\t\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\n\t//when the answer is right, then the user can sign up\n\tgetQuestion().simulate('change', { target: { value: '1989' }});\n\texpect(getMessage().text()).to.equal('Enjoy :)');\t\n\texpect(getSubmitButton().prop('disabled')).to.equal(false);\n});"}],"title":"Create a beer online store","codeDefault":"","codeSolution":"class AgeCheck extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { age: '', question: '' };\n\t}\n\n\tsetValue(input, e) {\n\t\tthis.setState({ [input]: e.target.value });\n\t}\n\n\tisValidAnswer() {\n\t\tlet { age, question } = this.state;\n\t\treturn age && age === '>=18' && question === '1989';\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<select \n\t\t\t\t\tvalue={this.state.age}\n\t\t\t\t\tonChange={e => this.setValue('age', e)}>\n\t\t\t\t\t<option value='<18'>&lt;18</option>\n\t\t\t\t\t<option value='>=18'>&gte;18</option>\n\t\t\t\t</select>{\n\t\t\t\t\tthis.state.age === '>=18' &&\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='When did the German wall fall?'\n\t\t\t\t\t\tvalue={this.state.question}\n\t\t\t\t\t\tonChange={e => this.setValue('question', e)} />\n\t\t\t\t}\n\t\t\t\t<label className='message'>{\n\t\t\t\t\tthis.state.age === '<18' ?\n\t\t\t\t\t\t'Sorry, you must be 18+ to proceed' :\n\t\t\t\t\t\tthis.state.question ?\n\t\t\t\t\t\t\tthis.state.question === '1989' ?\n\t\t\t\t\t\t\t\t'Enjoy :)' :\n\t\t\t\t\t\t\t\t'Wrong answer!' :\n\t\t\t\t\t\t\t''\n\t\t\t\t}</label>\n\t\t\t\t<input type='submit' disabled={!this.isValidAnswer()} />\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We love beer, specially Alhambra 1925...so hard to find!\n\nWe're creating an online store to sell beers. On sign up, our customers have to prove the are, at least, 18 years old by performing a couple of checks."},{"code":"","target":[{"code":"[{\n\tit: 'EvilSignInForm propagates an altered email from the US',\n\tform: { email: 'donald@trump.com', password: 'AmericaFirst' },\n\texpected: { email: 'trump@donald.com', password: btoa('AmericaFirst') }\n}, {\n\tit: 'EvilSignInForm propagates an altered email from the UK',\n\tform: { email: 'theresa@may.gov', password: 'Brexit' },\n\texpected: { email: 'may@theresa.gov', password: btoa('Brexit') }\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//given\n\t\tlet submitted = false;\n\t\tconst wrapper = shallow(\n\t\t\t<EvilSignInForm onSubmit={form => {\n\t\t\t\tsubmitted = true;\n\n\t\t\t\t//then\n\t\t\t\texpect(form.email).to.equal(scenario.expected.email);\n\t\t\t\texpect(form.password).to.equal(scenario.expected.password);\n\t\t\t}}/>\n\t\t);\n\t\tconst email = wrapper.find('input[type=\"email\"]');\n\t\tconst password = wrapper.find('input[type=\"password\"]');\n\t\tconst submitButton = wrapper.find('input[type=\"submit\"]');\n\t\tconst setValue = (input, value) => {\n\t\t\tinput.simulate('change', { target: { value }});\n\t\t};\n\n\t\t//when\n\t\tsetValue(email, scenario.form.email);\n\t\tsetValue(password, scenario.form.password);\n\t\tsubmitButton.simulate('click');\n\n\t\t//then\n\t\texpect(submitted).to.equal(true);\n\t});\n});"}],"title":"Create an evil Sign In form","codeDefault":"","codeSolution":"class EvilSignInForm extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { email: '', password: '' };\n\t}\n\n\tsetValue(input, e) {\n\t\tthis.setState({ [input]: e.target.value });\n\t}\n\n\tsubmit() {\n\t\tlet emailTokens = this.state.email.split('.');\n\t\tlet emailToken1 = emailTokens[0].split('@').reverse().join('@');\n\t\tthis.props.onSubmit({ \n\t\t\temail: `${emailToken1}.${emailTokens[1]}`,\n\t\t\tpassword: btoa(this.state.password)\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='email' value={this.state.email}\n\t\t\t\t\tonChange={e => this.setValue('email', e)} \n\t\t\t\t/>\n\t\t\t\t<input \n\t\t\t\t\ttype='password' value={this.state.password}\n\t\t\t\t\tonChange={e => this.setValue('password', e)} \n\t\t\t\t/>\n\t\t\t\t<input type='submit' onClick={() => this.submit()} />\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We want to introduce a new type of sign in form, that swaps the tokens (name <-> domain) of the given email address.\n\nOh! for security reasons, remember to encode the password into base-64."}],"title":"Forms"},{"level":"medium","stack":"reactjs","symbol":"<input />","tests":[{"code":"class Input extends React.Component {\n\n}","target":[{"code":"it('Input displays a controlled input field', () => {\n\n\t//when\n\tconst wrapper = shallow(<Input />);\n\tconst getInput = () => wrapper.find('input[type=\"text\"]');\n\n\t//then\n\texpect(getInput().props().value).to.equal('Peter');\n\t\n\t//when\n\tgetInput().simulate('change', { target: { value: 'Olivia' }});\n\n\t//then\n\texpect(getInput().props().value).to.equal('Olivia');\n});"}],"title":"Display an input field","codeSolution":"class Input extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { firstName: 'Peter' };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='text' value={this.state.firstName} \n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tthis.setState({ firstName: e.target.value});\n\t\t\t\t\t}} \n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}","codeDefault":"class Input extends React.Component {\n\n}","desc":"As simple as that. Please display a controlled input field, which means we want to track changes via `setState`."},{"code":"class Salary extends React.Component {\n\n}","target":[{"code":"it('Salary exposes the salary expectations of a player', () => {\n\n\t//when\n\tconst wrapper = shallow(<Salary />);\n\tconst getInput = () => wrapper.find('input[type=\"number\"]');\n\tconst getMessage = () => wrapper.find('label');\n\n\t//then\n\texpect(getInput().props().value).to.equal('');\n\texpect(getMessage().text()).to.equal('');\n\t\n\t//when\n\tgetInput().simulate('change', { target: { value: '28000' }});\n\n\t//then\n\texpect(getInput().props().value).to.equal('28000');\n\texpect(getMessage().text()).to.equal('Expected salary: £28000');\n});"}],"title":"Display the expected salary of a player","codeSolution":"class Salary extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { salary: '' };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='number' value={this.state.salary} \n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tthis.setState({ salary: e.target.value});\n\t\t\t\t\t}} \n\t\t\t\t/>\n\t\t\t\t<label>{\n\t\t\t\t\tthis.state.salary ?\n\t\t\t\t\t\t`Expected salary: £${this.state.salary}` :\n\t\t\t\t\t\t''\n\t\t\t\t}</label>\n\t\t\t</div>\n\t\t);\n\t}\n}","codeDefault":"class Salary extends React.Component {\n\n}","desc":"We want to give our players the opportunity to share, if they want and only with selected stakeholders, what are their professional salary expectations, so they can be contacted with relevant job positions."},{"code":"class Input extends React.Component {\n\n}","target":[{"code":"it('ResetableInput shows an input and a button to reset it', () => {\n\n\t//when\n\tconst wrapper = shallow(<Input />);\n\tconst getInput = () => wrapper.find('input[type=\"text\"]');\n\tconst getResetButton = () => wrapper.find('button');\n\n\t//then\n\texpect(getInput().props().value).to.equal('Charlotte');\n\texpect(getResetButton().text()).to.equal('Reset');\n\n\t//when\n\tgetResetButton().simulate('click');\n\n\t//then\n\texpect(getInput().props().value).to.equal('');\n});"}],"title":"Clear input with button","codeSolution":"class Input extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { firstName: 'Charlotte' };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type='text' value={this.state.firstName} />\n\t\t\t\t<button onClick={() => this.setState({ firstName: '' })}>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","codeDefault":"class Input extends React.Component {\n\n}","desc":"We'd like to display an input field with some value on it.\n\nApart from that, we want to show a button nearby, to allow resetting the input (that means, to set an empty value on it)."},{"code":"class Email extends React.Component {\n\n}","target":[{"code":"it('Email displays 2 inputs and check if they match', () => {\n\n\t//when\n\tconst wrapper = shallow(<Email />);\n\tconst getEmail = () => wrapper.find('.email');\n\tconst getConfirmEmail = () => wrapper.find('.confirmEmail');\n\tconst getMatchMessage = () => wrapper.find('label');\n\n\t//then\n\texpect(getEmail().props().value).to.equal('');\n\texpect(getMatchMessage().text()).to.equal('Great! Emails match');\n\t\n\t//when\n\tgetEmail().simulate('change', { target: { value: 'a@b.com' }});\n\n\t//then\n\texpect(getMatchMessage().text()).to.equal('Oh! Emails do not match!');\n\n\t//when\n\tgetConfirmEmail()\n\t\t.simulate('change', { target: { value: 'a@b.com' }});\n\n\t//then\n\texpect(getMatchMessage().text()).to.equal('Great! Emails match');\n});"}],"title":"Check if email inputs match","codeDefault":"class Email extends React.Component {\n\n}","codeSolution":"class Email extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { email: '', confirmEmail: '' };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\ttype='email' value={this.state.email} \n\t\t\t\t\tclassName='email' onChange={e => {\n\t\t\t\t\t\tthis.setState({ email: e.target.value});\n\t\t\t\t\t}} \n\t\t\t\t/>\n\t\t\t\t<input \n\t\t\t\t\ttype='email' value={this.state.confirmEmail} \n\t\t\t\t\tclassName='confirmEmail' onChange={e => {\n\t\t\t\t\t\tthis.setState({ confirmEmail: e.target.value});\n\t\t\t\t\t}} \n\t\t\t\t/>\n\t\t\t\t<label>{\n\t\t\t\t\tthis.state.email === this.state.confirmEmail ?\n\t\t\t\t\t\t'Great! Emails match' :\n\t\t\t\t\t\t'Oh! Emails do not match!'\t\n\t\t\t\t}</label>\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"In the old times, registering an email was easy peasy.\n\nToday, however, the majority of the addresses have been already taken, hence it's sometimes challenging to pick -and remember!- a decent one.\n\nPlease create a 2-input component, to set and review user's email address."},{"code":"class FruitPicker extends React.Component {\n\n}","target":[{"code":"it('FruitPicker allows user to select Apple and Orange', () => {\n\n\t//when\n\tconst wrapper = shallow(<FruitPicker selected='Apple' />);\n\tconst getSelector = () => wrapper.find('select');\n\n\t//then\n\texpect(getSelector().find('option').at(0).text()).to.equal('Apple');\n\texpect(getSelector().find('option').at(1).text()).to.equal('Orange');\n\texpect(getSelector().props().value).to.equal('Apple');\n\n\t//when\n\tgetSelector().simulate('change', { target: { value: 'Orange' }});\n\n\t//then\n\texpect(getSelector().props().value).to.equal('Orange');\n});"}],"title":"Pick a piece of fruit!","codeDefault":"class FruitPicker extends React.Component {\n\n}","codeSolution":"class FruitPicker extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { selected: props.selected };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<select \n\t\t\t\tvalue={this.state.selected} \n\t\t\t\tonChange={e => this.setState({ selected: e.target.value })}>\n\t\t\t\t<option value='Apple'>Apple</option>\n\t\t\t\t<option value='Orange'>Orange</option>\n\t\t\t</select>\n\t\t);\n\t}\n}","desc":"One apple a day keeps the doctor away.\n\nAt Kodiri, we believe & promote a healthy way of life, by e.g. organising sport competitions (yes, table tennis is a sport, and you can even sweat from time to time).\n\nApart from that, we are planning to offer free fruit to our employees. We'd like to create an online platform to give them the chance to select which type of fruit do they want to pick each time."}],"title":"Input fields"},{"level":"junior","stack":"reactjs","symbol":"render","tests":[{"code":"function Welcome() {\n\treturn <div></div>\n}","target":[{"code":"it('Welcome displays a welcome message', () => {\n\n\t//when\n\tconst welcome = shallow(<Welcome />);\n\n\t//then\n\texpect(welcome.text()).to.equal('Welcome to React!');\n});"}],"codeSolution":"function Welcome() {\n\treturn <div>Welcome to React!</div>;\n}","title":"Get a welcome message","desc":"Simply create a function to return the following message: `Welcome to React`\n\nPlease note React is case sensitive :)","codeDefault":"function Welcome() {\n\treturn <div></div>\n}","videoId":"lyDS7pZr5ZI"},{"code":"function Welcome() {\n\treturn (\n\t\t<div>\n\t\t\t<p>Welcome</p>\n\t\t</div>\n\t);\n}","target":[{"code":"it('Welcome returns welcome message in 2 paragraphs', () => {\n\n\t//given\n\tconst welcome = shallow(<Welcome />);\n\t\n\t//when\n\tlet paragraphs = welcome.find('p');\n\t\n\t//then\n\texpect(welcome.find('p')).to.have.length(2);\n\texpect(paragraphs.at(0).text()).to.equal('Welcome');\n\texpect(paragraphs.at(1).text()).to.equal('to React');\n});"}],"codeSolution":"function Welcome() {\n\treturn (\n\t\t<div>\n\t\t\t<p>Welcome</p>\n\t\t\t<p>to React</p>\n\t\t</div>\n\t);\n}","title":"Get a welcome message, in two paragraphs","desc":"Create a function to return the following message: `Welcome to React`\n\nPlease split the message into two separatedparagraphs (using the `p` tag):\n\n- Welcome\n- to React","codeDefault":"function Welcome() {\n\treturn (\n\t\t<div>\n\t\t\t<p>Welcome</p>\n\t\t</div>\n\t);\n}","videoId":"k9NoNO5KaT0"},{"code":"function BasketballStar() {\n\treturn (\n\t\t<div>\n\t\t\t<div>Michael</div>\n\t\t\t<div>Jordan</div>\n\t\t</div>\n\t)\n}","target":[{"code":"it('BasketballStar displays Michael Jordan details', () => {\n\n\t//when\n\tconst star = shallow(<BasketballStar />);\n\t\n\t//then\n\texpect(star.find('.firstName').text()).to.equal('Michael');\n\texpect(star.find('.lastName').text()).to.equal('Jordan');\n});"}],"title":"Dealing with classNames","codeSolution":"function BasketballStar() {\n\treturn (\n\t\t<div>\n\t\t\t<div className='firstName'>Michael</div>\n\t\t\t<div className='lastName'>Jordan</div>\n\t\t</div>\n\t);\n}","resources":"[Styling and CSS in React](https://reactjs.org/docs/faq-styling.html)","desc":"We want to introduce a new component (`BasketballStar`) to display some details about some legendary basketball players.\n\nWe'd like to add a `className` attribute to the first name and last name props, for styling purposes.","codeDefault":"function BasketballStar() {\n\treturn (\n\t\t<div>\n\t\t\t<div>Michael</div>\n\t\t\t<div>Jordan</div>\n\t\t</div>\n\t)\n}","videoId":"KKwRbRt3HKE"},{"code":"function BookDetails() {\n\treturn (\n\t\t<div>\n\t\t\t<div>32156\n\t\t\t<div>JavaScript: The Good Parts\n\t\t\t<author>\n\t\t</div>\n\t);\n}","target":[{"code":"it('BookDetails display book information', () => {\n\n\t//given\n\tconst bookDetails = shallow(<BookDetails />);\n\n\t//when\n\tconst bookId = bookDetails.find('#bookId').text();\n\tconst title = bookDetails.find('.title').text();\n\tconst author = bookDetails.find('author').text();\n\t\n\t//then\n\texpect(bookId).to.equal('32156');\n\texpect(title).to.equal('JavaScript: The Good Parts');\n\texpect(author).to.equal('Douglas Crockford');\n});"}],"title":"Mixing selectors","codeSolution":"function BookDetails() {\n\treturn (\n\t\t<div>\n\t\t\t<div id='bookId'>32156</div>\n\t\t\t<div className='title'>JavaScript: The Good Parts</div>\n\t\t\t<author>Douglas Crockford</author>\n\t\t</div>\n\t);\n}","codeDefault":"function BookDetails() {\n\treturn (\n\t\t<div>\n\t\t\t<div>32156\n\t\t\t<div>JavaScript: The Good Parts\n\t\t\t<author>\n\t\t</div>\n\t);\n}","desc":"We're trying to define a new React component to display the details of our last order:\n\n- Book Id\n- Title\n- Author\n\nA colleague started to work on it today, but he left early to play table tennis.\n\nCould you please complete it?","videoId":"-LIR6KlLb0M"},{"code":"function PremierLeagueFixtures() {\n\treturn (\n\t\t<div className='fixtures'></div>\n\t);\n}","target":[{"code":"it('PremierLeagueFixtures display match results', () => {\n\n\t//given\n\tconst premierLeagueFixtures = shallow(\n\t\t<PremierLeagueFixtures />\n\t);\n\t\n\t//when\n\tlet fixtures = premierLeagueFixtures.find('.fixtures');\n\tlet fixture = fixtures.find('.fixture');\n\t\n\t//then\n\texpect(fixtures).to.have.length(1);\n\texpect(fixture).to.have.length(1);\n\n\t//and\n\texpect(fixture.find('.team1').text()).to.equal('Tottenham');\n\texpect(fixture.find('.team2').text()).to.equal('Southampton');\n\texpect(fixture.find('.result').text()).to.equal('3-1');\n});"}],"title":"Dealing with nested selectors","codeSolution":"function PremierLeagueFixtures() {\n\treturn (\n\t\t<div className='fixtures'>\n\t\t\t<div className='fixture'>\n\t\t\t\t<div className='team1'>Tottenham</div>\n\t\t\t\t<div className='team2'>Southampton</div>\n\t\t\t\t<div className='result'>3-1</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}","codeDefault":"function PremierLeagueFixtures() {\n\treturn (\n\t\t<div className='fixtures'></div>\n\t);\n}","desc":"We'd like to create a new component to display the match results on the Premier League.\n\nThe structure of the component is:\n\n* `.fixtures`\n    * `.fixture`\n        * `.team1`\n        * `.team2`\n        * `.result`","videoId":"9nw_ewL7n9o"}],"title":"Render"},{"level":"junior","stack":"reactjs","symbol":"props","tests":[{"code":"function Welcome(props) {\n\treturn <div></div>;\n}","target":[{"code":"it('Welcome displays a welcome message to Peter', () => {\n\n\t//when\n\tconst welcome = shallow(<Welcome user='Peter' />);\n\n\t//then\n\texpect(welcome.text()).to.equal('Welcome to React, Peter!');\n});"},{"code":"it('Welcome displays a welcome message to Laura', () => {\n\n\t//when\n\tconst welcome = shallow(<Welcome user='Laura' />);\n\n\t//then\n\texpect(welcome.text()).to.equal('Welcome to React, Laura!');\n});"}],"codeSolution":"function Welcome(props) {\n\treturn <div>Welcome to React, {props.user}!</div>;\n}","title":"Welcome a given user","codeDefault":"function Welcome(props) {\n\treturn <div></div>;\n}","desc":"We want to create a `Welcome` component to say 'hello' to a given user","videoId":"Kfi_dSiYVGw"},{"code":"function President(props) {\n\treturn <div></div>\n}","target":[{"code":"it('President displays details for Bill Clinton', () => {\n\n\t//when\n\tconst president = shallow(\n\t\t<President firstName='Bill' lastName='Clinton' />\n\t);\n\t\n\t//then\n\texpect(president.find('.firstName').text())\n\t\t.to.equal('First name: Bill');\n\texpect(president.find('.lastName').text())\n\t\t.to.equal('Last name: Clinton');\n});"},{"code":"it('President displays details for Barack Obama', () => {\n\n\t//when\n\tconst president = shallow(\n\t\t<President firstName='Barack' lastName='Obama' />\n\t);\n\t\n\t//then\n\texpect(president.find('.firstName').text())\n\t\t.to.equal('First name: Barack');\n\texpect(president.find('.lastName').text())\n\t\t.to.equal('Last name: Obama');\n});"}],"codeSolution":"function President(props) {\n\treturn (\n\t\t<div>\n\t\t\t<p className='firstName'>\n\t\t\t\tFirst name: {props.firstName}\n\t\t\t</p>\n\t\t\t<p className='lastName'>\n\t\t\t\tLast name: {props.lastName}\n\t\t\t</p>\n\t\t</div>\n\t);\n}","codeDefault":"function President(props) {\n\treturn <div></div>\n}","title":"Display details of US presidents","desc":"We're creating a mobile app to display some basic information about former presidents of the US.","videoId":"FQqBN0uVP1s"},{"code":"function Player(props) {\n\treturn (\n\t\t<div>\n\t\t\t<p className='name'>\n\t\t\t\tName: \n\t\t\t</p>\n\t\t</div>\n\t);\n}","target":[{"code":"it('Player displays score details for Andrea', () => {\n\n\t//given\n\tconst person = { name: 'Andrea', score: 65 };\n\t\n\t//when\n\tconst player = shallow(<Player person={person} />);\n\t\n\t//then\n\texpect(player.find('.name').text()).to.equal('Name: Andrea');\n\texpect(player.find('.score').text()).to.equal('Score: 65');\n});"},{"code":"it('Player displays score details for Lily', () => {\n\n\t//given\n\tconst person = { name: 'Lily', score: 71 };\n\t\n\t//when\n\tconst player = shallow(<Player person={person} />);\n\t\n\t//then\n\texpect(player.find('.name').text()).to.equal('Name: Lily');\n\texpect(player.find('.score').text()).to.equal('Score: 71');\n});"}],"title":"Show player details","codeSolution":"function Player(props) {\n\treturn (\n\t\t<div>\n\t\t\t<p className='name'>\n\t\t\t\tName: {props.person.name}\n\t\t\t</p>\n\t\t\t<p className='score'>\n\t\t\t\tScore: {props.person.score}\n\t\t\t</p>\n\t\t</div>\n\t);\n}","codeDefault":"function Player(props) {\n\treturn (\n\t\t<div>\n\t\t\t<p className='name'>\n\t\t\t\tName: \n\t\t\t</p>\n\t\t</div>\n\t);\n}","desc":"By popular demand, we'd like to introduce a new view into the platform to displaying the average score of a given user.","videoId":"9YTfNjYZb0Y"},{"code":"function ScoreDetails(props) {\n\treturn (\n\t\t<div></div>\n\t);\n}","target":[{"code":"it('ScoreDetails displays details (2 values passed)', () => {\n\n\t//given\n\tconst scores = [54, 65];\n\t\n\t//when\n\tconst scoreDetails = shallow(<ScoreDetails scores={scores} />);\n\t\n\t//then\n\texpect(scoreDetails.find('.total').text()).to.equal('Total: 2');\n\texpect(scoreDetails.find('.first').text()).to.equal('First: 54');\n\texpect(scoreDetails.find('.second').text()).to.equal('Second: 65');\n});"},{"code":"it('ScoreDetails displays details (3 values passed)', () => {\n\n\t//given\n\tconst scores = [71, 85, 91];\n\t\n\t//when\n\tconst scoreDetails = shallow(<ScoreDetails scores={scores} />);\n\t\n\t//then\n\texpect(scoreDetails.find('.total').text()).to.equal('Total: 3');\n\texpect(scoreDetails.find('.first').text()).to.equal('First: 71');\n\texpect(scoreDetails.find('.second').text()).to.equal('Second: 85');\n});"}],"title":"Analyse scores","codeSolution":"function ScoreDetails(props) {\n\treturn (\n\t\t<div>\n\t\t\t<p className='total'>\n\t\t\t\tTotal: {props.scores.length}\n\t\t\t</p>\n\t\t\t<p className='first'>\n\t\t\t\tFirst: {props.scores[0]}\n\t\t\t</p>\n\t\t\t<p className='second'>\n\t\t\t\tSecond: {props.scores[1]}\n\t\t\t</p>\n\t\t</div>\n\t);\n}","desc":"Please create a component to display basic details of a given list of scores:\n\n- Number of received scores\n- First score\n- Second score\n\nYou can assume each list contains, at least, two elements.","codeDefault":"function ScoreDetails(props) {\n\treturn (\n\t\t<div></div>\n\t);\n}","resources":"[Arrays](https://www.w3schools.com/js/js_arrays.asp)","videoId":"pKQwMjkVwXc"},{"code":"function TotalScore(props) {\n\tlet scores = props.scores;\n\treturn (\n\t\t<div></div>\n\t);\n}","target":[{"code":"it('TotalScore returns the accumulated score (bad results)', () => {\n\n\t//when\n\tconst totalScore = shallow(<TotalScore scores={[34, 35, 36]} />);\n\t\n\t//then\n\texpect(totalScore.text()).to.equal('The total score is: 105');\n});"},{"code":"it('TotalScore returns the accumulated score (good results)', () => {\n\n\t//when\n\tconst totalScore = shallow(<TotalScore scores={[65, 75, 86]} />);\n\t\n\t//then\n\texpect(totalScore.text()).to.equal('The total score is: 226');\n});"}],"title":"Display the total score","codeSolution":"function TotalScore(props) {\n\tlet scores = props.scores;\n\treturn (\n\t\t<div>\n\t\t\tThe total score is: {scores[0] + scores[1] + scores[2]}\n\t\t</div>\n\t);\n}","codeDefault":"function TotalScore(props) {\n\tlet scores = props.scores;\n\treturn (\n\t\t<div></div>\n\t);\n}","resources":"[Arrays](https://www.w3schools.com/js/js_arrays.asp)","desc":"We are planning to create a new component to display the accumulated score of a given player.","videoId":"L6uFGZG14Ms"}],"title":"Props"},{"level":"junior","stack":"reactjs","symbol":"A || B","tests":[{"code":"function Welcome(props) {\n\tif(props.lastName) {\n\t\treturn <div></div>;\n\t} else {\n\t\treturn <div></div>;\n\t}\n}","target":[{"code":"it(\n\t'Welcome displays a welcome message when the last ' +\n\t'name is provided', () => {\n\n\t\t//when\n\t\tconst welcome = shallow(\n\t\t\t<Welcome firstName='Valentino' lastName='Rossi' />\n\t\t);\n\n\t\t//then\n\t\texpect(welcome.text()).to.equal('Welcome Mr Rossi');\n\t});"},{"code":"it(\n\t'Welcome displays a welcome message when the last ' +\n\t'name is not provided', () => {\n\n\t\t//when\n\t\tconst welcome = shallow(<Welcome firstName='Carl' />);\n\n\t\t//then\n\t\texpect(welcome.text()).to.equal('Welcome Carl');\n\t});"}],"title":"Welcome users","codeDefault":"function Welcome(props) {\n\tif(props.lastName) {\n\t\treturn <div></div>;\n\t} else {\n\t\treturn <div></div>;\n\t}\n}","codeSolution":"function Welcome(props) {\n\tif(props.lastName) {\n\t\treturn <div>Welcome Mr {props.lastName}</div>;\n\t} else {\n\t\treturn <div>Welcome {props.firstName}</div>;\n\t}\n}","desc":"We'd like to display a welcome message to our customers, according to the following criteria:\n\n- If the `lastName` is provided -> display `Welcome Mr lastName`\n- If not -> display `Welcome firstName`","videoId":"h2qYEEtagL8"},{"code":"function BuyTickets(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.user.age >= 18 ?\n\t\t\t\t'' :\n\t\t\t\t'' \n\t\t}</div>\n\t);\n}","target":[{"code":"it(`\n\tBuyTickets doesn't allow the user to proceed \n\tthe he/she is below 18\n`, () => {\n\n\t//given\n\tlet user = { name: 'Anthony', age: 16 };\n\n\t//when\n\tconst buyTickets = shallow(<BuyTickets user={user} />);\n\n\t//then\n\texpect(buyTickets.text()).to.equal(\n\t\t'Sorry, try again once you turn 18'\n\t);\n});"},{"code":"it(`\n\tBuyTickets allows the user to proceed \n\tthe he/she is at least 18\n`, () => {\n\n\t//given\n\tlet user = { name: 'Anthony', age: 21 };\n\n\t//when\n\tconst buyTickets = shallow(<BuyTickets user={user} />);\n\n\t//then\n\texpect(buyTickets.text()).to.equal('Enjoy the show!');\n});"}],"title":"Create a ticketing system","codeDefault":"function BuyTickets(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.user.age >= 18 ?\n\t\t\t\t'' :\n\t\t\t\t'' \n\t\t}</div>\n\t);\n}","codeSolution":"function BuyTickets(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.user.age >= 18 ?\n\t\t\t\t'Enjoy the show!' :\n\t\t\t\t'Sorry, try again once you turn 18' \n\t\t}</div>\n\t);\n}","desc":"We'd like to introduce a new online system to allow users buying tickets for their favourite shows.\n\nThe only exception is: they should be at least 18 years old to proceed!","resources":"[How to use the conditional operator in JavaScript?](https://stackoverflow.com/questions/6259982/how-do-you-use-the-conditional-operator-in-javascript)","videoId":"VyVfhlTlvdw"},{"code":"function ChallengeResults(props) {\n\n\tfunction getAverage() {\n\t\treturn props.scores.reduce((average, score) => {\n\t\t\treturn average + score / props.scores.length;\n\t\t}, 0);\n\t}\n\n\treturn (\n\t\t<div>{\n\t\t\ttrue === true ? 'Well done!' : 'Keep training!'\n\t\t}</div>\n\t);\n}","target":[{"code":"it(`\n\tChallengeResults displays a \"keep training\" message \n\twhen the average results are < 50\n`, () => {\n\n\t//when\n\tconst welcome = shallow(\n\t\t<ChallengeResults scores={[34, 54, 34, 23]} />\n\t);\n\n\t//then\n\texpect(welcome.text()).to.equal('Keep training!');\n});"},{"code":"it(`\n\tChallengeResults displays a \"well done\" message \n\twhen the average results are >= 50\n`, () => {\n\n\t//when\n\tconst welcome = shallow(\n\t\t<ChallengeResults scores={[91, 71, 64, 79]} />\n\t);\n\n\t//then\n\texpect(welcome.text()).to.equal('Well done!');\n});"}],"title":"Evaluate challenge results","codeDefault":"function ChallengeResults(props) {\n\n\tfunction getAverage() {\n\t\treturn props.scores.reduce((average, score) => {\n\t\t\treturn average + score / props.scores.length;\n\t\t}, 0);\n\t}\n\n\treturn (\n\t\t<div>{\n\t\t\ttrue === true ? 'Well done!' : 'Keep training!'\n\t\t}</div>\n\t);\n}","codeSolution":"function ChallengeResults(props) {\n\n\tfunction getAverage() {\n\t\treturn props.scores.reduce((average, score) => {\n\t\t\treturn average + score / props.scores.length;\n\t\t}, 0);\n\t}\n\n\treturn (\n\t\t<div>{\n\t\t\tgetAverage() >= 50 ? 'Well done!' : 'Keep training!'\n\t\t}</div>\n\t);\n}","desc":"Please create a new component to determine how good the challenge results of a given user are.\n\nIt'd be great to reuse the existing `getAverage` function, so:\n\n- If it returns >= 50 -> display `Well done!`\n-If it returns < 50 -> display `Keep training!`","resources":"[How to use the conditional operator in JavaScript?](https://stackoverflow.com/questions/6259982/how-do-you-use-the-conditional-operator-in-javascript)","videoId":"hRSaL0UA2j0"},{"code":"function FilmScore(props) {\n\n}","target":[{"code":"it('FilmScore identifies \"poor\" movies', () => {\n\tconst filmScore = shallow(\n\t\t<FilmScore title='Alien vs Predator' score={45} />\n\t);\n\texpect(filmScore.text()).to.equal('Poor');\n});\n"},{"code":"it('FilmScore identifies \"nice\" movies', () => {\n\tconst filmScore = shallow(\n\t\t<FilmScore title='Top Gun' score={68} />\n\t);\n\texpect(filmScore.text()).to.equal('Nice');\n});"},{"code":"it('FilmScore identifies \"excellent\" movies', () => {\n\tconst filmScore = shallow(\n\t\t<FilmScore title='A Clockwork Orange' score={82} />\n\t);\n\texpect(filmScore.text()).to.equal('Excellent');\n});\n"}],"title":"How good a film is?","codeDefault":"function FilmScore(props) {\n\n}","codeSolution":"function FilmScore(props) {\n\tif(props.score < 50) {\n\t\treturn 'Poor';\n\t} else if(props.score < 75) {\n\t\treturn 'Nice';\n\t} else {\n\t\treturn 'Excellent';\n\t}\n}","desc":"We'd like to evaluate how good a given film is depending on its average score on the internet:\n\n- <50: Poor\n- >=50 && < 75: Nice\n- >= 75: Excellent\n","videoId":"IxgszwH098c"},{"code":"function ClubTickets(props) {\n\n}","target":[{"code":"it(`\n\tClubTickets allows the user to buy tickets \n\twhen he/she is at least 18 years old\n`, () => {\n\tconst niceClubTickets = shallow(\n\t\t<ClubTickets user={{ age: 18 }} />\n\t);\n\texpect(niceClubTickets.text()).to.equal('Purchased!');\n});"},{"code":"it(`\n\tClubTickets allows the user to buy tickets \n\twhen he/she applies to the afternoon session (alcohol-free)\n`, () => {\n\tconst niceClubTickets = shallow(\n\t\t<ClubTickets user={{ age: 17, session:'afternoon' }} />\n\t);\n\texpect(niceClubTickets.text()).to.equal('Purchased!');\n});"},{"code":"it(`\n\tClubTickets doesn't allow the user to buy tickets \n\twhen he/she applies to the night session and is < 18\n`, () => {\n\tconst niceClubTickets = shallow(\n\t\t<ClubTickets user={{ age: 17, session:'night' }} />\n\t);\n\texpect(niceClubTickets.text()).to.equal('Sorry, not allowed');\n});"}],"title":"Purchase dance club tickets","codeDefault":"function ClubTickets(props) {\n\n}","codeSolution":"function ClubTickets(props) {\n\treturn props.user.session === 'afternoon' ?\n\t\t'Purchased!' :\n\t\tprops.user.age >= 18 ? \n\t\t\t'Purchased!' : \n\t\t\t'Sorry, not allowed';\n}","desc":"A new posh club is opening in town.\n\nWe'd like to create a ticketing system for our customers.\n\nIn that respect, we'd like to introduce some age-related restrictions:\n\n- If the age is at least 18, then users are allowed to purchase tickets.\n- If the age is below 18, users are allowed to purchase tickets IF the selected session is on the afternoon (alcohol-free)","videoId":"tOOkKZYwqnY"}],"title":"Conditional rendering"},{"level":"junior","stack":"reactjs","symbol":"loop","tests":[{"code":"function Actors(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.names.map(name => (\n\t\t\t\t<p></p>\n\t\t\t))\n\t\t}</div>\n\t);\n}","target":[{"code":"it('Actors displays a list of 3 actors', () => {\n\n\t//given\n\tconst actors = shallow(\n\t\t<Actors names={['Arnold', 'Silvester', 'Steven']} />\n\t);\n\n\t//when\n\tlet paragraphs = actors.find('p');\n\n\t//then\n\texpect(paragraphs).to.have.length(3);\n\texpect(paragraphs.at(0).text()).to.equal('Arnold');\n\texpect(paragraphs.at(1).text()).to.equal('Silvester');\n\texpect(paragraphs.at(2).text()).to.equal('Steven');\n});"},{"code":"it('Actors displays a list of 1 actor', () => {\n\n\t//given\n\tconst actors = shallow(<Actors names={['Leonardo']} />);\n\n\t//when\n\tlet paragraphs = actors.find('p');\n\n\t//then\n\texpect(paragraphs).to.have.length(1);\n\texpect(paragraphs.at(0).text()).to.equal('Leonardo');\n});"}],"title":"Display a list of actor names","codeDefault":"function Actors(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.names.map(name => (\n\t\t\t\t<p></p>\n\t\t\t))\n\t\t}</div>\n\t);\n}","codeSolution":"function Actors(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.names.map(name => (\n\t\t\t\t<p key={name}>{name}</p>\n\t\t\t))\n\t\t}</div>\n\t);\n}","desc":"Simply display a list of actors :)","videoId":"zB91J6p3FSw"},{"code":"function Actors(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.actors.map(player => (\n\t\t\t\t<p key={player.name}></p>\n\t\t\t))\t\t\t\n\t\t}</div>\n\t);\n}","target":[{"code":"it('Actors takes 3 actors and display their name and age', () => {\n\n\t//given\n\tconst actors = shallow(\n\t\t<Actors actors={[\n\t\t\t{ name: 'Arnold', age: 71 }, { name: 'Silvester', age: 72 }\n\t\t]} />\n\t);\n\n\t//when\n\tlet paragraphs = actors.find('p');\n\n\t//then\n\texpect(paragraphs).to.have.length(2);\n\texpect(paragraphs.at(0).text()).to.equal('Arnold (71)');\n\texpect(paragraphs.at(1).text()).to.equal('Silvester (72)');\n});"},{"code":"it('Actors takes 1 actor and display their name and age', () => {\n\n\t//given\n\tconst actors = shallow(\n\t\t<Actors actors={[{ name: 'Steven', age: 66 }]} />\n\t);\n\n\t//when\n\tlet paragraphs = actors.find('p');\n\n\t//then\n\texpect(paragraphs).to.have.length(1);\n\texpect(paragraphs.at(0).text()).to.equal('Steven (66)');\n});"}],"title":"Display a list of actor details","codeDefault":"function Actors(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.actors.map(player => (\n\t\t\t\t<p key={player.name}></p>\n\t\t\t))\t\t\t\n\t\t}</div>\n\t);\n}","codeSolution":"function Actors(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.actors.map(player => (\n\t\t\t\t<p key={player.name}>{player.name} ({player.age})</p>\n\t\t\t))\n\t\t}</div>\n\t);\n}","desc":"We have a list of actors, and we'd like to display their details:\n\n- name\n- age","videoId":"TvEC7A7IoMU"},{"code":"function WorldChampions(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.drivers\n\t\t\t\t.filter(driver => driver.isWorldChampion)\n\t\t\t\t.map(driver => (\n\t\t\t\t\t<label></label>\n\t\t\t\t))\n\t\t}</div>\n\t);\n}","target":[{"code":"it('WorldChampions filters out the non-champion drivers', () => {\n\n\t//given\n\tconst worldChampions = shallow(<WorldChampions drivers={[\n\t\t{ name: 'Nigel Mansell', isWorldChampion: true },\n\t\t{ name: 'Keke Rosbert', isWorldChampion: false },\n\t\t{ name: 'Alain Prost', isWorldChampion: true }\n\t]} />);\n\n\t//when\n\tlet labels = worldChampions.find('label');\n\t\n\t//then\n\texpect(labels).to.have.length(2);\n\texpect(labels.at(0).text()).to.equal('Nigel Mansell');\n\texpect(labels.at(1).text()).to.equal('Alain Prost');\n});"},{"code":"it(\n\t'WorldChampions doesn\\'t display anything ' +\n\t'if no champions are provided', () => {\n\n\t\t//given\n\t\tconst worldChampions = shallow(<WorldChampions drivers={[\n\t\t\t{ name: 'Tarso Marques', isWorldChampion: false }\n\t\t]} />);\n\n\t\t//when\n\t\tlet labels = worldChampions.find('label');\n\t\t\n\t\t//then\n\t\texpect(labels).to.have.length(0);\n\t});"}],"title":"Display a list of Formula 1 World Champions","codeDefault":"function WorldChampions(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.drivers\n\t\t\t\t.filter(driver => driver.isWorldChampion)\n\t\t\t\t.map(driver => (\n\t\t\t\t\t<label></label>\n\t\t\t\t))\n\t\t}</div>\n\t);\n}","codeSolution":"function WorldChampions(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.drivers\n\t\t\t\t.filter(driver => driver.isWorldChampion)\n\t\t\t\t.map(driver => (\n\t\t\t\t\t<label key={driver.name}>{driver.name}</label>\n\t\t\t\t))\n\t\t}</div>\n\t);\n}","desc":"We have a large database of Formula 1 drivers, from legends like Ayrton Senna or Michael Schumacher to some others like Luca Badoer or Alex Yoong.\n\nWe'd like to display a list of World Champions!","resources":"[Filtering elements in JavaScript](https://www.w3schools.com/jsref/jsref_filter.asp)","videoId":"CzacQpUKLFI"},{"code":"function User(props) {\n\treturn (\n\t\t<div>{\n\t\t\tObject.keys(props.user).map(key => (\n\t\t\t\t<div className='detail' key={key}>\n\t\t\t\t\t{key}:\n\t\t\t\t</div>\n\t\t\t))\n\t\t}</div>\n\t);\n}","target":[{"code":"it('User displays name and age details', () => {\n\n\t//given\n\tconst user = shallow(<User user={{ name: 'Peter', age: 31 }} />);\n\t\n\t//when\n\tlet details = user.find('.detail');\n\t\n\t//then\n\texpect(details).to.have.length(2);\n\texpect(details.at(0).text()).to.equal('name: Peter');\n\texpect(details.at(1).text()).to.equal('age: 31');\n});"},{"code":"it('User displays firstName and lastName details', () => {\n\n\t//given\n\tconst user = shallow(\n\t\t<User user={{ firstName: 'Ada', lastName: 'Lovelace' }} />\n\t);\n\t\n\t//when\n\tlet details = user.find('.detail');\n\t\n\t//then\n\texpect(details).to.have.length(2);\n\texpect(details.at(0).text()).to.equal('firstName: Ada');\n\texpect(details.at(1).text()).to.equal('lastName: Lovelace');\n});"}],"title":"Display the details of a given user","codeDefault":"function User(props) {\n\treturn (\n\t\t<div>{\n\t\t\tObject.keys(props.user).map(key => (\n\t\t\t\t<div className='detail' key={key}>\n\t\t\t\t\t{key}:\n\t\t\t\t</div>\n\t\t\t))\n\t\t}</div>\n\t);\n}","codeSolution":"function User(props) {\n\treturn (\n\t\t<div>{\n\t\t\tObject.keys(props.user).map(key => (\n\t\t\t\t<div className='detail' key={key}>\n\t\t\t\t\t{key}: {props.user[key]}\n\t\t\t\t</div>\n\t\t\t))\n\t\t}</div>\n\t);\n}","resources":"[Getting the keys of an object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n[Using the bracket notation with objects](https://codeburst.io/javascript-quickie-dot-notation-vs-bracket-notation-333641c0f781)","desc":"We are trying to display the details of a given user.\n\nThere's an issue, though. We don't know which properties are available each time!","videoId":"XQYJ614ehIo"},{"code":"function StartingGrid(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.teams\n\t\t\t\t.reverse()\n\t\t\t\t.map((team, index) => (\n\t\t\t\t\t<div className='position'>\n\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t}</div>\n\t);\n}","target":[{"code":"it('StartingGrid reverses a list of 3 teams', () => {\n\n\t//given\n\tconst startingGrid = shallow(\n\t\t<StartingGrid teams={['Ferrari', 'McLaren', 'Williams']} />\n\t);\n\t\n\t//when\n\tlet positions = startingGrid.find('.position');\n\t\n\t//then\n\texpect(positions).to.have.length(3);\n\texpect(positions.at(0).text()).to.equal('1. Williams');\n\texpect(positions.at(1).text()).to.equal('2. McLaren');\n\texpect(positions.at(2).text()).to.equal('3. Ferrari');\n});"},{"code":"it('StartingGrid reverses a list of 2 teams', () => {\n\n\t//given\n\tconst startingGrid = shallow(\n\t\t<StartingGrid teams={['Jordan', 'Minardi']} />\n\t);\n\t\n\t//when\n\tlet positions = startingGrid.find('.position');\n\t\n\t//then\n\texpect(positions).to.have.length(2);\n\texpect(positions.at(0).text()).to.equal('1. Minardi');\n\texpect(positions.at(1).text()).to.equal('2. Jordan');\n});"}],"title":"Reverse starting grid","codeDefault":"function StartingGrid(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.teams\n\t\t\t\t.reverse()\n\t\t\t\t.map((team, index) => (\n\t\t\t\t\t<div className='position'>\n\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t}</div>\n\t);\n}","codeSolution":"function StartingGrid(props) {\n\treturn (\n\t\t<div>{\n\t\t\tprops.teams\n\t\t\t\t.reverse()\n\t\t\t\t.map((team, index) => (\n\t\t\t\t\t<div className='position'>\n\t\t\t\t\t\t{index + 1}. {team}\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t}</div>\n\t);\n}","desc":"Formula 1 is loosing spectators year after year.\n\nTo improve the show, the organisers are thinking about reversing the given entry list of teams, so which ever was supposed to start last will be promoted to the head of the queue, and vice-versa.","resources":"[Reversing arrays](https://www.w3schools.com/jsref/jsref_reverse.asp)","videoId":"YIur7a2Q3HI"}],"title":"Iterating through list of elements"},{"level":"junior","stack":"reactjs","symbol":"<input />","tests":[{"code":"function Text() {\n\treturn (\n\t\t<div>\n\t\t\n\t\t</div>\n\t);\n}","target":[{"code":"it(\n\t'Text displays a basic input text, ' + \n\t'with a value and a placeholder', () => {\n\n\t\t//given\n\t\tconst wrapper = shallow(<Text />);\n\n\t\t//when\n\t\tlet input = wrapper.find('input[type=\"text\"]');\n\n\t\t//then\n\t\texpect(input.props().value).to.equal('My first input!');\n\t\texpect(input.props().placeholder).to.equal(\n\t\t\t'This text is visible when input is blank'\n\t\t);\n\t});"}],"codeSolution":"function Text() {\n\treturn (\n\t\t<div>\n\t\t\t<input \n\t\t\t\ttype='text' value='My first input!' \n\t\t\t\tplaceholder='This text is visible when input is blank' />\n\t\t</div>\n\t);\n}","codeDefault":"function Text() {\n\treturn (\n\t\t<div>\n\t\t\n\t\t</div>\n\t);\n}","title":"Display a basic input text","desc":"We'd like to display a basic input text, including:\n\n- A default value\n- A placeholder (that is, the text we display when the input is blank)","resources":"[HTML input type=\"text\"](https://www.w3schools.com/tags/att_input_type_text.asp)","videoId":"52Prmi2WNzQ"},{"code":"function Text(props) {\n\treturn (\n\t\t<div>\n\t\t\n\t\t</div>\n\t);\n}","target":[{"code":"it('Text displays email details with a default value', () => {\n\n\t//given\n\tconst wrapper = shallow(\n\t\t<Text \n\t\t\tvalue='donald@trump.com' \n\t\t\tplaceholder='Enter your email' />\n\t);\n\n\t//when\n\tlet input = wrapper.find('input[type=\"text\"]');\n\n\t//then\n\texpect(input.props().value).to.equal('donald@trump.com');\n\texpect(input.props().placeholder).to.equal('Enter your email');\n});"},{"code":"it('Text displays location details with a default value', () => {\n\n\t//given\n\tconst wrapper = shallow(\n\t\t<Text \n\t\t\tvalue='London' \n\t\t\tplaceholder='Enter your location' />\n\t);\n\n\t//when\n\tlet input = wrapper.find('input[type=\"text\"]');\n\n\t//then\n\texpect(input.props().value).to.equal('London');\n\texpect(input.props().placeholder).to.equal('Enter your location');\n});"}],"title":"Display an input text with dynamic data","codeDefault":"function Text(props) {\n\treturn (\n\t\t<div>\n\t\t\n\t\t</div>\n\t);\n}","codeSolution":"function Text(props) {\n\treturn (\n\t\t<input \n\t\t\ttype='text' \n\t\t\tvalue={props.value} \n\t\t\tplaceholder={props.placeholder} \n\t\t/>\n\t);\n}","desc":"We're trying to create a dynamic input text component, by passing different properties to it each time:\n\n- A default value\n- A placeholder (that is, the text we display when the input is blank)","resources":"[HTML input type=\"text\"](https://www.w3schools.com/tags/att_input_type_text.asp)","videoId":"HSMyTC3j0AI"},{"code":"function Textarea(props) {\n\treturn (\n\t\t<div>\n\t\t\n\t\t</div>\n\t);\n}","target":[{"code":"it('Textarea displays a multi-line input (user thoughts)', () => {\n\n\t//given\n\tconst wrapper = shallow(\n\t\t<Textarea \n\t\t\tvalue='Over 300 languages are spoken in London' \n\t\t\tplaceholder='Please share your thoughts' />\n\t);\n\n\t//when\n\tlet textarea = wrapper.find('textarea');\n\n\t//then\n\texpect(textarea.props().value)\n\t\t.to.equal('Over 300 languages are spoken in London');\n\texpect(textarea.props().placeholder)\n\t\t.to.equal('Please share your thoughts');\n});"},{"code":"it('Textarea displays a multi-line input (race positions)', () => {\n\n\t//given\n\tconst wrapper = shallow(\n\t\t<Textarea \n\t\t\tvalue='1. Ferrari, 2. McLaren, 3. Williams'\n\t\t\tplaceholder='Please enter the positions here' />\n\t);\n\n\t//when\n\tlet textarea = wrapper.find('textarea');\n\n\t//then\n\texpect(textarea.props().value)\n\t\t.to.equal('1. Ferrari, 2. McLaren, 3. Williams');\n\texpect(textarea.props().placeholder)\n\t\t.to.equal('Please enter the positions here');\n});"}],"title":"Display a textarea with dynamic data","codeDefault":"function Textarea(props) {\n\treturn (\n\t\t<div>\n\t\t\n\t\t</div>\n\t);\n}","codeSolution":"function Textarea(props) {\n\treturn (\n\t\t<textarea \n\t\t\tvalue={props.value} \n\t\t\tplaceholder={props.placeholder} \n\t\t/>\n\t);\n}","desc":"We're trying to create a dynamic textarea component, by passing different properties to it each time:\n\n- A default value\n- A placeholder (that is, the text we display when the input is blank)","resources":"[HTML textarea tag](https://www.w3schools.com/tags/tag_textarea.asp)","videoId":"6AvyvurdduA"},{"code":"function Checkboxes(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}","target":[{"code":"it('Checkboxes only marks the terms input', () => {\n\n\t//given\n\tconst wrapper = shallow(<Checkboxes terms={true} news={false} />);\n\n\t//when\n\tlet termsInput = wrapper.find('input[type=\"checkbox\"].terms');\n\tlet newsInput = wrapper.find('input[type=\"checkbox\"].news');\n\n\t// //then\n\texpect(termsInput.props().value).to.equal(true);\n\texpect(newsInput.props().value).to.equal(false);\n});"},{"code":"it('Checkboxes only marks the news input', () => {\n\n\t//given\n\tconst wrapper = shallow(<Checkboxes terms={false} news={true} />);\n\n\t//when\n\tlet termsInput = wrapper.find('input[type=\"checkbox\"].terms');\n\tlet newsInput = wrapper.find('input[type=\"checkbox\"].news');\n\n\t// //then\n\texpect(termsInput.props().value).to.equal(false);\n\texpect(newsInput.props().value).to.equal(true);\n});"}],"title":"Display checkboxes on a sign up form","codeDefault":"function Checkboxes(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}","codeSolution":"function Checkboxes(props) {\n\treturn (\n\t\t<div>\n\t\t\t<input \n\t\t\t\ttype='checkbox' \n\t\t\t\tclassName='terms' \n\t\t\t\tvalue={props.terms} />\n\t\t\t<input \n\t\t\t\ttype='checkbox' \n\t\t\t\tclassName='news' \n\t\t\t\tvalue={props.news} />\n\t\t</div>\n\t);\n}","desc":"Let's talk about checkboxes!\n\nAs part of our sign up form, we'd like to display, at the bottom, a couple of ticks to confirm whether the user:\n\n1) Accepts the terms and conditions\n2) Accepts to receive a monthly newsletter.\n\nWe'd like to customise the default values for these checkbox on each case.","resources":"[HTML input type=\"checkbox\"](https://www.w3schools.com/tags/att_input_type_checkbox.asp)","videoId":"E1BCJklxh48"},{"code":"function FruitPicker(props) {\n\treturn (\n\t\t<select>\n\t\t\t\n\t\t</select>\n\t);\n}","target":[{"code":"it('FruitPicker allows user to select Apple and Orange', () => {\n\n\t//given\n\tconst wrapper = shallow(<FruitPicker />);\n\n\t//when\n\tlet select = wrapper.find('select');\n\n\t//then\n\texpect(select.find('option').at(0).text()).to.equal('Apple');\n\texpect(select.find('option').at(1).text()).to.equal('Orange');\n});"},{"code":"it('FruitPicker can select Apple fruit by default', () => {\n\n\t//given\n\tconst wrapper = shallow(<FruitPicker selected='Apple' />);\n\n\t//when\n\tlet select = wrapper.find('select');\n\n\t//then\n\texpect(select.props().value).to.equal('Apple');\n});"},{"code":"it('FruitPicker can select Banana fruit by default', () => {\n\n\t//given\n\tconst wrapper = shallow(<FruitPicker selected='Orange' />);\n\n\t//when\n\tlet select = wrapper.find('select');\n\n\t//then\n\texpect(select.props().value).to.equal('Orange');\n});"}],"title":"Display a combo to select a piece of fruit","codeDefault":"function FruitPicker(props) {\n\treturn (\n\t\t<select>\n\t\t\t\n\t\t</select>\n\t);\n}","codeSolution":"function FruitPicker(props) {\n\treturn (\n\t\t<select value={props.selected}>\n\t\t\t<option>Apple</option>\n\t\t\t<option>Orange</option>\n\t\t</select>\n\t);\n}","desc":"As part of our new diet, our nutritionist has suggested us to eat more fruit, unsurprisingly. She's particularly interested on apples and oranges.\n\nLet's display a dropdown to pick a piece of fruit, with the ability of showing a different default element each time.","resources":"[HTML select tag](https://www.w3schools.com/tags/tag_select.asp)","videoId":"QNnUXFDP70M"}],"title":"Input fields"},{"level":"medium","stack":"reactjs","symbol":"<button>","tests":[{"code":"class PressMe extends React.Component {\n\n}","target":[{"code":"it('PressMe checks whether the button has been pressed or not', () => {\n\n\t//when\n\tconst wrapper = shallow(<PressMe />);\n\tconst getPressMeButton = () => wrapper.find('button');\n\tconst getMessage = () => wrapper.find('label');\n\n\t//then\n\texpect(getPressMeButton().text()).to.equal('Press me!');\n\texpect(getMessage().text()).to.equal('Button not pressed yet');\n\n\t//when\n\tgetPressMeButton().simulate('click');\n\n\t//then\n\texpect(getMessage().text()).to.equal('Button already pressed!');\n});"}],"codeSolution":"class PressMe extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { pressed: false };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={() => this.setState({ pressed: true })}>\n\t\t\t\t\tPress me!\n\t\t\t\t</button>\n\t\t\t\t<label>{\n\t\t\t\t\tthis.state.pressed ?\n\t\t\t\t\t\t'Button already pressed!' :\n\t\t\t\t\t\t'Button not pressed yet'\n\t\t\t\t}</label>\n\t\t\t</div>\n\t\t);\n\t}\n}","title":"Press the button!","codeDefault":"class PressMe extends React.Component {\n\n}","desc":"We simply want to create a component with a single button on it, so its text will reflect whether it's been pressed at least once or not."},{"code":"class DriverDetails extends React.Component {\n\n}","target":[{"code":"it('DriverDetails toggles driver stats', () => {\n\n\t//when\n\tconst wrapper = shallow(<DriverDetails />);\n\tconst getPressMeButton = () => wrapper.find('button');\n\tconst getDetails = () => wrapper.find('label.details');\n\n\t//then\n\texpect(getPressMeButton().text()).to.equal('Toggle driver details');\n\texpect(getDetails().exists()).to.equal(false);\n\n\t//when\n\tgetPressMeButton().simulate('click');\n\n\t//then\n\texpect(getDetails().exists()).to.equal(true);\n\texpect(getDetails().text())\n\t\t.to.equal('Races: 314, Titles: 2, Poles: 22');\n\n\t//when\n\tgetPressMeButton().simulate('click');\n\n\t//then\n\texpect(getDetails().exists()).to.equal(false);\n});"}],"title":"Toggle driver details","codeDefault":"class DriverDetails extends React.Component {\n\n}","codeSolution":"class DriverDetails extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { visible: false };\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={() => {\n\t\t\t\t\tthis.setState({ visible: !this.state.visible });\n\t\t\t\t}}>\n\t\t\t\t\tToggle driver details\n\t\t\t\t</button>\n\t\t\t\t{\n\t\t\t\t\tthis.state.visible &&\n\t\t\t\t\t<label className='details'>\n\t\t\t\t\t\tRaces: 314, Titles: 2, Poles: 22\n\t\t\t\t\t</label>\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We are creating a racing database, and we'd like to toggle the details of a given driver when clicking on a button near to his/her name."},{"code":"class Submit extends React.Component {\n\n}","target":[{"code":"it('Submit shows the submission progress', async () => {\n\n\t//when\n\tconst wrapper = shallow(<Submit />);\n\tconst getPressMeButton = () => wrapper.find('button');\n\n\t//then\n\texpect(getPressMeButton().text()).to.equal('Press to submit');\n\n\t//when\n\tgetPressMeButton().simulate('click');\n\n\t//then\n\texpect(getPressMeButton().text()).to.equal('Submitting...');\n\n\t//when\n\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\n\t//then\n\texpect(getPressMeButton().text()).to.equal('Done!');\n});"}],"codeSolution":"class Submit extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { message: 'Press to submit' };\n\t}\n\n\tonClick() {\n\t\tthis.setState({ message: 'Submitting...' });\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ message: 'Done!' });\n\t\t}, 1000);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button onClick={() => this.onClick()}>\n\t\t\t\t\t{this.state.message}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","codeDefault":"class Submit extends React.Component {\n\n}","title":"Submit a request","desc":"When completing a form, it sometimes takes a while to complete the request and display some results to the user.\n\nTo improve the UX, we'd like to display a 'submitting' message on the CTA button while the request is being processed.\n\nPlease simulate the completion of the request after, exactly, 1s from being invoked."},{"code":"class ResetPassword extends React.Component {\n\n}","target":[{"code":"it('ResetPassword disables the files while processing', async () => {\n\n\t//when\n\tconst wrapper = shallow(<ResetPassword />);\n\tconst getEmailInput = () => wrapper.find('input[type=\"email\"]');\n\tconst getSubmitButton = () => wrapper.find('button');\n\n\t//then\n\texpect(getSubmitButton().prop('disabled')).to.equal(false);\n\texpect(getEmailInput().prop('disabled')).to.equal(false);\n\n\t//when\n\tgetSubmitButton().simulate('click');\n\n\t//then\n\texpect(getSubmitButton().prop('disabled')).to.equal(true);\n\texpect(getEmailInput().prop('disabled')).to.equal(true);\n\n\t//when\n\tawait new Promise(resolve => setTimeout(resolve, 500));\n\n\t//then\n\texpect(getSubmitButton().prop('disabled')).to.equal(false);\n\texpect(getEmailInput().prop('disabled')).to.equal(false);\n});"}],"codeSolution":"class ResetPassword extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { submitting: false };\n\t}\n\n\tsubmit() {\n\t\tthis.setState({ submitting: true });\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ submitting: false });\n\t\t}, 500);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type='email' disabled={this.state.submitting} />\n\t\t\t\t<button \n\t\t\t\t\tonClick={() => this.submit()} \n\t\t\t\t\tdisabled={this.state.submitting}>\n\t\t\t\t\tReset password\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","codeDefault":"class ResetPassword extends React.Component {\n\n}","title":"Reseting user's password","desc":"Sometimes users forget their passwords, so we'd like to create a functionality to handle the situation it by sending an email to reset it.\n\nTo avoid multiple requests being submitted multiple times, please disable all the inputs until the process finishes in, exactly, half a second."},{"code":"class Chess extends React.Component {\n\n}","target":[{"code":"[\n\t{ it: 'Chess sets classic players', white: 'Fisher', black: 'Karpov' },\n\t{ it: 'Chess sets modern players', white: 'Carlsen', black: 'Aronian' }\n].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(\n\t\t\t<Chess white={scenario.white} black={scenario.black} />\n\t\t);\n\t\tconst getTopPlayer = () => wrapper.find('label.top');\n\t\tconst getBottomPlayer = () => wrapper.find('label.bottom');\n\t\tconst getSwapButton = () => wrapper.find('button');\n\n\t\t//then\n\t\texpect(getTopPlayer().text()).to.equal(scenario.black);\n\t\texpect(getBottomPlayer().text()).to.equal(scenario.white);\n\n\t\t//when\n\t\tgetSwapButton().simulate('click');\n\n\t\t//then\n\t\texpect(getTopPlayer().text()).to.equal(scenario.white);\n\t\texpect(getBottomPlayer().text()).to.equal(scenario.black);\n\t});\n});"}],"title":"Create a Chess game","codeSolution":"class Chess extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { white: props.white, black: props.black };\n\t}\n\n\tswap() {\n\t\tlet { white, black } = this.props;\n\t\tthis.setState({ white: black, black: white });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<label className='top'>{this.state.black}</label>\n\t\t\t\t<label className='bottom'>{this.state.white}</label>\n\t\t\t\t<button onClick={() => this.swap()}>Swap!</button>\n\t\t\t</div>\n\t\t);\n\t}\n}","codeDefault":"class Chess extends React.Component {\n\n}","desc":"We'd like to revive some of the greatest Chess games in history.\n\nLet's create a game that assigns player to Black (top position) and White (bottom position).\n\nPlease add a button to swap sides, so every player can play with both Black and White."}],"title":"Buttons"},{"level":"medium","stack":"reactjs","symbol":"A, B, C","tests":[{"code":"class Movies extends React.Component {\n\n}","target":[{"code":"[{\n\tit: 'Movies display a list of modern action titles',\n\tlist: [\n\t\t{ title: 'Wonder Woman', year: 2017, director: 'Patty Jenkins' },\n\t\t{ title: 'Black Panther', year: 2018, director: 'Ryan Coogler' }\n\t],\n\texpected: [\n\t\t'Wonder Woman (2017), directed by Patty Jenkins',\n\t\t'Black Panther (2018), directed by Ryan Coogler'\n\t]\n}, {\n\tit: 'Movies display a list of classic comedy titles',\n\tlist: [\n\t\t{ title: 'Airplane!', year: 1980, director: 'David Zucker' },\n\t\t{ title: 'Ghostbusters', year: 1984, director: 'Ivan Reitman' }\n\t],\n\texpected: [\n\t\t'Airplane! (1980), directed by David Zucker',\n\t\t'Ghostbusters (1984), directed by Ivan Reitman'\n\t]\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(<Movies list={scenario.list} />);\n\t\tconst movies = wrapper.find('p');\n\n\t\t//then\n\t\texpect(movies).to.have.length(2);\n\t\texpect(movies.at(0).text()).to.equal(scenario.expected[0]);\n\t\texpect(movies.at(1).text()).to.equal(scenario.expected[1]);\n\t});\n});"}],"title":"Display a list of movies","codeDefault":"class Movies extends React.Component {\n\n}","codeSolution":"class Movies extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{\n\t\t\t\tthis.props.list.map(movie => (\n\t\t\t\t\t<p key={movie.title}>\n\t\t\t\t\t\t{movie.title} ({movie.year}), \n\t\t\t\t\t\tdirected by {movie.director}\n\t\t\t\t\t</p>\n\t\t\t\t))\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We are creating a movie database, and we'd like to display a list of titles in a user-friendly format."},{"code":"class FemalePlayers extends React.Component {\n\n}","target":[{"code":"[{\n\tit: 'FemalePlayers display a list of modern female players',\n\tlist: [{ name: 'Federer', gender: 'M'}, { name: 'Osaka', gender: 'F'}],\n\texpected: ['Osaka']\n}, {\n\tit: 'FemalePlayers display a list of classic female players',\n\tlist: [{ name: 'Seles', gender: 'F'}, { name: 'Hingis', gender: 'F'}],\n\texpected: ['Hingis', 'Seles']\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(<FemalePlayers list={scenario.list} />);\n\t\tconst players = wrapper.find('p');\n\n\t\t//then\n\t\texpect(players).to.have.length(scenario.expected.length);\n\t\tscenario.expected.forEach((player, i) => {\n\t\t\texpect(players.at(i).text()).to.equal(scenario.expected[i]);\n\t\t});\n\t});\n});"}],"title":"Display a list of female tennis players","codeDefault":"class FemalePlayers extends React.Component {\n\n}","codeSolution":"class FemalePlayers extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{\n\t\t\t\tthis.props.list\n\t\t\t\t\t.filter(player => player.gender === 'F')\n\t\t\t\t\t.sort((a, b) => a < b ? -1 : 1)\n\t\t\t\t\t.map(player => <p key={player.name}>{player.name}</p>)\n\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"We want to create a component to display a list of professional female tennis players.\n\nPlease sort the results alphabetically!"},{"code":"class Countries extends React.Component {\n\n}","target":[{"code":"it('Countries filters a list of nations', () => {\n\n\t//when\n\tconst list = ['Jamaica', 'Japan', 'Jordan'];\n\tconst wrapper = shallow(<Countries list={list} />);\n\tconst getCountries = () => wrapper.find('p');\n\tconst getFilterInput = () => wrapper.find('input');\n\n\t//then\n\texpect(getCountries()).to.have.length(3);\n\texpect(getCountries().at(0).text()).to.equal('Jamaica');\n\texpect(getCountries().at(1).text()).to.equal('Japan');\n\texpect(getCountries().at(2).text()).to.equal('Jordan');\n\n\t//when\n\tgetFilterInput().simulate('change', { target: { value: 'Jor' }});\n\n\t//then\n\texpect(getCountries()).to.have.length(1);\n\texpect(getCountries().at(0).text()).to.equal('Jordan');\n\n\t//when\n\tgetFilterInput().simulate('change', { target: { value: 'Ja' }});\n\t\n\t//then\n\texpect(getCountries()).to.have.length(2);\n\texpect(getCountries().at(0).text()).to.equal('Jamaica');\n\texpect(getCountries().at(1).text()).to.equal('Japan');\n});"}],"title":"Display a filtered list of countries","codeDefault":"class Countries extends React.Component {\n\n}","codeSolution":"class Countries extends React.Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = { filter: '' };\n\t}\n\n\tupdateFilter(e) {\n\t\tthis.setState({ filter: e.target.value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type='text' onChange={e => this.updateFilter(e)} />\n\t\t\t\t{\n\t\t\t\t\tthis.props.list\n\t\t\t\t\t\t.filter(country => {\n\t\t\t\t\t\t\treturn country.includes(this.state.filter);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.map(country => <p key={country}>{country}</p>)\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n\t}\n}","desc":"There are lots of countries in the world.\n\nHave you ever heard about Saint Kitts and Nevis? It's one of them indeed.\n\nWe'd like to display a list of nations, with a filter mechanism to decide which ones are visible each time."},{"code":"class MusicArtists extends React.Component {\n\n}","target":[{"code":"[{\n\tit: 'MusicArtists displays the first album for M. Fleetwood',\n\tartists: [\n\t\t{ name: 'S. Fox', firstAlbum: 'Samantha Fox', showDetails: false },\n\t\t{ name: 'M. Fleetwood', firstAlbum: 'Rumours', showDetails: true }\n\t]\n}, {\n\tit: 'MusicArtists displays the details of both J. Bieber and Oasis',\n\tartists: [\n\t\t{ name: 'Oasis', firstAlbum: 'M. of the Sun', showDetails: true },\n\t\t{ name: 'J. Bieber', firstAlbum: 'My World', showDetails: true }\n\t]\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(<MusicArtists list={scenario.artists} />);\n\t\tconst getArtists = () => wrapper.find('.artist');\n\t\tconst getArtistName = artist => artist.find('.name');\n\t\tconst getFirstAlbum = artist => artist.find('.firstAlbum');\n\n\t\t//then\n\t\texpect(getArtists()).to.have.length(scenario.artists.length);\n\t\tscenario.artists.forEach((artist, index) => {\n\t\t\tlet artistEl = getArtists().at(index);\n\t\t\tlet { name, firstAlbum, showDetails } = artist;\n\t\t\texpect(getArtistName(artistEl).text()).to.equal(name);\n\t\t\texpect(getFirstAlbum(artistEl).exists()).to.equal(showDetails);\n\t\t\tif(showDetails) {\n\t\t\t\texpect(getFirstAlbum(artistEl).text())\n\t\t\t\t\t.to.equal(firstAlbum);\n\t\t\t}\n\t\t});\n\t});\n});"}],"title":"Display a list of music artists","codeDefault":"class MusicArtists extends React.Component {\n\n}","codeSolution":"class MusicArtists extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{\n\t\t\t\tthis.props.list.map(artist => (\n\t\t\t\t\t<div className='artist' key={artist.name}>\n\t\t\t\t\t\t<div className='name'>{artist.name}</div>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tartist.showDetails &&\n\t\t\t\t\t\t\t<div className='firstAlbum'>\n\t\t\t\t\t\t\t\t{artist.firstAlbum}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}</div>\n\t\t);\n\t}\n}","desc":"We want to display a list of music artists, both bands and individuals.\n\nIn some cases, we'd like to display additional details. For now, these are represented by their first Album, but in the future we plan to incorporate extra info (e.g. how old they are)."},{"code":"class F1Drivers extends React.Component {\n\n}","target":[{"code":"[{\n\tit: 'F1Drivers displays the positions of some Spanish drivers',\n\tdrivers: [\n\t\t{ name: 'Alonso', positions: { '2003': 6, '2004': 4, '2005': 1 }},\n\t\t{ name: 'Sainz', positions: { '2015': 15, '2016': 12 }}\n\t]\n}, {\n\tit: 'F1Drivers displays the positions of some British drivers',\n\tdrivers: [\n\t\t{ name: 'Mansell', positions: { '1991': 2, '1992': 1, '1994': 9 }},\n\t\t{ name: 'Clark', positions: { '1960': 10, '1961': 4, '1962': 2 }}\n\t]\n}].forEach(scenario => {\n\n\tit(scenario.it, () => {\n\n\t\t//when\n\t\tconst wrapper = shallow(<F1Drivers list={scenario.drivers} />);\n\t\tconst getDrivers = () => wrapper.find('.driver');\n\t\tconst getDriverName = driver => driver.find('.name');\n\t\tconst getDriverPositions = driver => driver.find('.positions');\n\n\t\t//then\n\t\texpect(getDrivers()).to.have.length(scenario.drivers.length);\n\t\tscenario.drivers.forEach((driver, index) => {\n\t\t\tlet driverEl = getDrivers().at(index);\n\t\t\tlet { name, positions } = driver;\n\t\t\tlet textPos = Object.keys(positions).map(year => {\n\t\t\t\treturn `${year}: ${positions[year]}`;\n\t\t\t}).join(', ');\n\t\t\texpect(getDriverName(driverEl).text()).to.equal(name);\n\t\t\texpect(getDriverPositions(driverEl).text()).to.equal(textPos);\n\t\t});\n\t});\n});"}],"title":"Nested list, e.g. players with score and date and level","codeDefault":"class F1Drivers extends React.Component {\n\n}","codeSolution":"class F1Drivers extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{\n\t\t\t\tthis.props.list.map(driver => (\n\t\t\t\t\t<div className='driver' key={driver.name}>\n\t\t\t\t\t\t<div className='name'>{driver.name}</div>\n\t\t\t\t\t\t<div className='positions'>{\n\t\t\t\t\t\t\tObject.keys(driver.positions)\n\t\t\t\t\t\t\t\t.map(year => (\n\t\t\t\t\t\t\t\t\t`${year}: ${driver.positions[year]}`\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t\t.join(', ')\n\t\t\t\t\t\t}</div>\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t}</div>\n\t\t);\n\t}\n}","desc":"Let's show the final position of some Formula 1 drivers at the end of certain seasons."}],"title":"Lists"}]
